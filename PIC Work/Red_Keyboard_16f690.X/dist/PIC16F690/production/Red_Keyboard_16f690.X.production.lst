

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu May  7 22:58:50 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F690
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	intentry,global,class=CODE,delta=2
    43                           	dabs	1,0x7E,2
    44  0000                     	;# 
    45  0001                     	;# 
    46  0002                     	;# 
    47  0003                     	;# 
    48  0004                     	;# 
    49  0005                     	;# 
    50  0006                     	;# 
    51  0007                     	;# 
    52  000A                     	;# 
    53  000B                     	;# 
    54  000C                     	;# 
    55  000D                     	;# 
    56  000E                     	;# 
    57  000E                     	;# 
    58  000F                     	;# 
    59  0010                     	;# 
    60  0011                     	;# 
    61  0012                     	;# 
    62  0013                     	;# 
    63  0014                     	;# 
    64  0015                     	;# 
    65  0015                     	;# 
    66  0016                     	;# 
    67  0017                     	;# 
    68  0018                     	;# 
    69  0019                     	;# 
    70  001A                     	;# 
    71  001C                     	;# 
    72  001D                     	;# 
    73  001E                     	;# 
    74  001F                     	;# 
    75  0081                     	;# 
    76  0085                     	;# 
    77  0086                     	;# 
    78  0087                     	;# 
    79  008C                     	;# 
    80  008D                     	;# 
    81  008E                     	;# 
    82  008F                     	;# 
    83  0090                     	;# 
    84  0092                     	;# 
    85  0093                     	;# 
    86  0093                     	;# 
    87  0093                     	;# 
    88  0094                     	;# 
    89  0095                     	;# 
    90  0095                     	;# 
    91  0096                     	;# 
    92  0096                     	;# 
    93  0097                     	;# 
    94  0098                     	;# 
    95  0099                     	;# 
    96  009A                     	;# 
    97  009B                     	;# 
    98  009E                     	;# 
    99  009F                     	;# 
   100  010C                     	;# 
   101  010C                     	;# 
   102  010D                     	;# 
   103  010E                     	;# 
   104  010F                     	;# 
   105  0115                     	;# 
   106  0116                     	;# 
   107  0118                     	;# 
   108  0119                     	;# 
   109  011A                     	;# 
   110  011B                     	;# 
   111  011E                     	;# 
   112  011F                     	;# 
   113  018C                     	;# 
   114  018D                     	;# 
   115  019D                     	;# 
   116  019E                     	;# 
   117  0000                     	;# 
   118  0001                     	;# 
   119  0002                     	;# 
   120  0003                     	;# 
   121  0004                     	;# 
   122  0005                     	;# 
   123  0006                     	;# 
   124  0007                     	;# 
   125  000A                     	;# 
   126  000B                     	;# 
   127  000C                     	;# 
   128  000D                     	;# 
   129  000E                     	;# 
   130  000E                     	;# 
   131  000F                     	;# 
   132  0010                     	;# 
   133  0011                     	;# 
   134  0012                     	;# 
   135  0013                     	;# 
   136  0014                     	;# 
   137  0015                     	;# 
   138  0015                     	;# 
   139  0016                     	;# 
   140  0017                     	;# 
   141  0018                     	;# 
   142  0019                     	;# 
   143  001A                     	;# 
   144  001C                     	;# 
   145  001D                     	;# 
   146  001E                     	;# 
   147  001F                     	;# 
   148  0081                     	;# 
   149  0085                     	;# 
   150  0086                     	;# 
   151  0087                     	;# 
   152  008C                     	;# 
   153  008D                     	;# 
   154  008E                     	;# 
   155  008F                     	;# 
   156  0090                     	;# 
   157  0092                     	;# 
   158  0093                     	;# 
   159  0093                     	;# 
   160  0093                     	;# 
   161  0094                     	;# 
   162  0095                     	;# 
   163  0095                     	;# 
   164  0096                     	;# 
   165  0096                     	;# 
   166  0097                     	;# 
   167  0098                     	;# 
   168  0099                     	;# 
   169  009A                     	;# 
   170  009B                     	;# 
   171  009E                     	;# 
   172  009F                     	;# 
   173  010C                     	;# 
   174  010C                     	;# 
   175  010D                     	;# 
   176  010E                     	;# 
   177  010F                     	;# 
   178  0115                     	;# 
   179  0116                     	;# 
   180  0118                     	;# 
   181  0119                     	;# 
   182  011A                     	;# 
   183  011B                     	;# 
   184  011E                     	;# 
   185  011F                     	;# 
   186  018C                     	;# 
   187  018D                     	;# 
   188  019D                     	;# 
   189  019E                     	;# 
   190  0000                     	;# 
   191  0001                     	;# 
   192  0002                     	;# 
   193  0003                     	;# 
   194  0004                     	;# 
   195  0005                     	;# 
   196  0006                     	;# 
   197  0007                     	;# 
   198  000A                     	;# 
   199  000B                     	;# 
   200  000C                     	;# 
   201  000D                     	;# 
   202  000E                     	;# 
   203  000E                     	;# 
   204  000F                     	;# 
   205  0010                     	;# 
   206  0011                     	;# 
   207  0012                     	;# 
   208  0013                     	;# 
   209  0014                     	;# 
   210  0015                     	;# 
   211  0015                     	;# 
   212  0016                     	;# 
   213  0017                     	;# 
   214  0018                     	;# 
   215  0019                     	;# 
   216  001A                     	;# 
   217  001C                     	;# 
   218  001D                     	;# 
   219  001E                     	;# 
   220  001F                     	;# 
   221  0081                     	;# 
   222  0085                     	;# 
   223  0086                     	;# 
   224  0087                     	;# 
   225  008C                     	;# 
   226  008D                     	;# 
   227  008E                     	;# 
   228  008F                     	;# 
   229  0090                     	;# 
   230  0092                     	;# 
   231  0093                     	;# 
   232  0093                     	;# 
   233  0093                     	;# 
   234  0094                     	;# 
   235  0095                     	;# 
   236  0095                     	;# 
   237  0096                     	;# 
   238  0096                     	;# 
   239  0097                     	;# 
   240  0098                     	;# 
   241  0099                     	;# 
   242  009A                     	;# 
   243  009B                     	;# 
   244  009E                     	;# 
   245  009F                     	;# 
   246  010C                     	;# 
   247  010C                     	;# 
   248  010D                     	;# 
   249  010E                     	;# 
   250  010F                     	;# 
   251  0115                     	;# 
   252  0116                     	;# 
   253  0118                     	;# 
   254  0119                     	;# 
   255  011A                     	;# 
   256  011B                     	;# 
   257  011E                     	;# 
   258  011F                     	;# 
   259  018C                     	;# 
   260  018D                     	;# 
   261  019D                     	;# 
   262  019E                     	;# 
   263  0000                     	;# 
   264  0001                     	;# 
   265  0002                     	;# 
   266  0003                     	;# 
   267  0004                     	;# 
   268  0005                     	;# 
   269  0006                     	;# 
   270  0007                     	;# 
   271  000A                     	;# 
   272  000B                     	;# 
   273  000C                     	;# 
   274  000D                     	;# 
   275  000E                     	;# 
   276  000E                     	;# 
   277  000F                     	;# 
   278  0010                     	;# 
   279  0011                     	;# 
   280  0012                     	;# 
   281  0013                     	;# 
   282  0014                     	;# 
   283  0015                     	;# 
   284  0015                     	;# 
   285  0016                     	;# 
   286  0017                     	;# 
   287  0018                     	;# 
   288  0019                     	;# 
   289  001A                     	;# 
   290  001C                     	;# 
   291  001D                     	;# 
   292  001E                     	;# 
   293  001F                     	;# 
   294  0081                     	;# 
   295  0085                     	;# 
   296  0086                     	;# 
   297  0087                     	;# 
   298  008C                     	;# 
   299  008D                     	;# 
   300  008E                     	;# 
   301  008F                     	;# 
   302  0090                     	;# 
   303  0092                     	;# 
   304  0093                     	;# 
   305  0093                     	;# 
   306  0093                     	;# 
   307  0094                     	;# 
   308  0095                     	;# 
   309  0095                     	;# 
   310  0096                     	;# 
   311  0096                     	;# 
   312  0097                     	;# 
   313  0098                     	;# 
   314  0099                     	;# 
   315  009A                     	;# 
   316  009B                     	;# 
   317  009E                     	;# 
   318  009F                     	;# 
   319  010C                     	;# 
   320  010C                     	;# 
   321  010D                     	;# 
   322  010E                     	;# 
   323  010F                     	;# 
   324  0115                     	;# 
   325  0116                     	;# 
   326  0118                     	;# 
   327  0119                     	;# 
   328  011A                     	;# 
   329  011B                     	;# 
   330  011E                     	;# 
   331  011F                     	;# 
   332  018C                     	;# 
   333  018D                     	;# 
   334  019D                     	;# 
   335  019E                     	;# 
   336  0000                     	;# 
   337  0001                     	;# 
   338  0002                     	;# 
   339  0003                     	;# 
   340  0004                     	;# 
   341  0005                     	;# 
   342  0006                     	;# 
   343  0007                     	;# 
   344  000A                     	;# 
   345  000B                     	;# 
   346  000C                     	;# 
   347  000D                     	;# 
   348  000E                     	;# 
   349  000E                     	;# 
   350  000F                     	;# 
   351  0010                     	;# 
   352  0011                     	;# 
   353  0012                     	;# 
   354  0013                     	;# 
   355  0014                     	;# 
   356  0015                     	;# 
   357  0015                     	;# 
   358  0016                     	;# 
   359  0017                     	;# 
   360  0018                     	;# 
   361  0019                     	;# 
   362  001A                     	;# 
   363  001C                     	;# 
   364  001D                     	;# 
   365  001E                     	;# 
   366  001F                     	;# 
   367  0081                     	;# 
   368  0085                     	;# 
   369  0086                     	;# 
   370  0087                     	;# 
   371  008C                     	;# 
   372  008D                     	;# 
   373  008E                     	;# 
   374  008F                     	;# 
   375  0090                     	;# 
   376  0092                     	;# 
   377  0093                     	;# 
   378  0093                     	;# 
   379  0093                     	;# 
   380  0094                     	;# 
   381  0095                     	;# 
   382  0095                     	;# 
   383  0096                     	;# 
   384  0096                     	;# 
   385  0097                     	;# 
   386  0098                     	;# 
   387  0099                     	;# 
   388  009A                     	;# 
   389  009B                     	;# 
   390  009E                     	;# 
   391  009F                     	;# 
   392  010C                     	;# 
   393  010C                     	;# 
   394  010D                     	;# 
   395  010E                     	;# 
   396  010F                     	;# 
   397  0115                     	;# 
   398  0116                     	;# 
   399  0118                     	;# 
   400  0119                     	;# 
   401  011A                     	;# 
   402  011B                     	;# 
   403  011E                     	;# 
   404  011F                     	;# 
   405  018C                     	;# 
   406  018D                     	;# 
   407  019D                     	;# 
   408  019E                     	;# 
   409                           
   410                           	psect	idataCOMMON
   411  006B                     __pidataCOMMON:	
   412                           
   413                           ;initializer for _key_count
   414  006B  3417               	retlw	23
   415  006C  3400               	retlw	0
   416                           
   417                           	psect	stringtext
   418  0100                     __pstringtext:	
   419  0100                     stringtab:	
   420  0100                     __stringtab:	
   421                           
   422                           ;	String table - string pointers are 2 bytes each
   423  0100  1BFF               	btfsc	btemp+1,7
   424  0101  290A               	ljmp	stringcode
   425  0102  1383               	bcf	3,7
   426  0103  187F               	btfsc	btemp+1,0
   427  0104  1783               	bsf	3,7
   428  0105  0800               	movf	0,w
   429  0106  0A84               	incf	4,f
   430  0107  1903               	skipnz
   431  0108  0AFF               	incf	btemp+1,f
   432  0109  0008               	return
   433  010A                     stringcode:	
   434  010A  087F               	movf	btemp+1,w
   435  010B  397F               	andlw	127
   436  010C  008A               	movwf	10
   437  010D  0804               	movf	4,w
   438  010E  0A84               	incf	4,f
   439  010F  1903               	skipnz
   440  0110  0AFF               	incf	btemp+1,f
   441  0111  0082               	movwf	2
   442  0112                     __stringbase:	
   443  0112                     __end_of__stringtab:	
   444  0112                     _dpowers:	
   445  0112  3401               	retlw	1
   446  0113  3400               	retlw	0
   447  0114  340A               	retlw	10
   448  0115  3400               	retlw	0
   449  0116  3464               	retlw	100
   450  0117  3400               	retlw	0
   451  0118  34E8               	retlw	232
   452  0119  3403               	retlw	3
   453  011A  3410               	retlw	16
   454  011B  3427               	retlw	39
   455  011C                     __end_of_dpowers:	
   456  0005                     _PORTAbits	set	5
   457  0006                     _PORTBbits	set	6
   458  0007                     _PORTCbits	set	7
   459  0013                     _SSPBUF	set	19
   460  0014                     _SSPCONbits	set	20
   461  0019                     _TXREG	set	25
   462  0018                     _CARRY	set	24
   463  00C4                     _CREN	set	196
   464  005F                     _GIE	set	95
   465  00C7                     _SPEN	set	199
   466  0064                     _TXIF	set	100
   467  009B                     _BAUDCTLbits	set	155
   468  008F                     _OSCCON	set	143
   469  0099                     _SPBRG	set	153
   470  0094                     _SSPSTATbits	set	148
   471  0085                     _TRISA	set	133
   472  0085                     _TRISAbits	set	133
   473  0086                     _TRISB	set	134
   474  0086                     _TRISBbits	set	134
   475  0087                     _TRISC	set	135
   476  0087                     _TRISCbits	set	135
   477  0095                     _WPUAbits	set	149
   478  04C2                     _BRGH	set	1218
   479  04C4                     _SYNC	set	1220
   480  04C5                     _TXEN	set	1221
   481  040F                     _nRABPU	set	1039
   482  011E                     _ANSEL	set	286
   483  011F                     _ANSELH	set	287
   484  010D                     _EEADR	set	269
   485  010C                     _EEDATA	set	268
   486  018C                     _EECON1	set	396
   487  018D                     _EECON2	set	397
   488  0C60                     _RD	set	3168
   489  0C61                     _WR	set	3169
   490  0C62                     _WREN	set	3170
   491  011C                     STR_11:	
   492  011C  3457               	retlw	87	;'W'
   493  011D  3465               	retlw	101	;'e'
   494  011E  3427               	retlw	39	;'''
   495  011F  346C               	retlw	108	;'l'
   496  0120  346C               	retlw	108	;'l'
   497  0121  3420               	retlw	32	;' '
   498  0122  3470               	retlw	112	;'p'
   499  0123  3475               	retlw	117	;'u'
   500  0124  3474               	retlw	116	;'t'
   501  0125  3420               	retlw	32	;' '
   502  0126  3479               	retlw	121	;'y'
   503  0127  346F               	retlw	111	;'o'
   504  0128  3475               	retlw	117	;'u'
   505  0129  3420               	retlw	32	;' '
   506  012A  3462               	retlw	98	;'b'
   507  012B  3461               	retlw	97	;'a'
   508  012C  3463               	retlw	99	;'c'
   509  012D  346B               	retlw	107	;'k'
   510  012E  3420               	retlw	32	;' '
   511  012F  3469               	retlw	105	;'i'
   512  0130  346E               	retlw	110	;'n'
   513  0131  3420               	retlw	32	;' '
   514  0132  3474               	retlw	116	;'t'
   515  0133  3475               	retlw	117	;'u'
   516  0134  346E               	retlw	110	;'n'
   517  0135  3469               	retlw	105	;'i'
   518  0136  346E               	retlw	110	;'n'
   519  0137  3467               	retlw	103	;'g'
   520  0138  3420               	retlw	32	;' '
   521  0139  346D               	retlw	109	;'m'
   522  013A  346F               	retlw	111	;'o'
   523  013B  3464               	retlw	100	;'d'
   524  013C  3465               	retlw	101	;'e'
   525  013D  3420               	retlw	32	;' '
   526  013E  3473               	retlw	115	;'s'
   527  013F  346F               	retlw	111	;'o'
   528  0140  3420               	retlw	32	;' '
   529  0141  3479               	retlw	121	;'y'
   530  0142  346F               	retlw	111	;'o'
   531  0143  3475               	retlw	117	;'u'
   532  0144  3420               	retlw	32	;' '
   533  0145  3463               	retlw	99	;'c'
   534  0146  3461               	retlw	97	;'a'
   535  0147  346E               	retlw	110	;'n'
   536  0148  3420               	retlw	32	;' '
   537  0149  3466               	retlw	102	;'f'
   538  014A  3469               	retlw	105	;'i'
   539  014B  3478               	retlw	120	;'x'
   540  014C  3420               	retlw	32	;' '
   541  014D  3469               	retlw	105	;'i'
   542  014E  3474               	retlw	116	;'t'
   543  014F  3420               	retlw	32	;' '
   544  0150  346E               	retlw	110	;'n'
   545  0151  346F               	retlw	111	;'o'
   546  0152  3477               	retlw	119	;'w'
   547  0153  342E               	retlw	46	;'.'
   548  0154  3420               	retlw	32	;' '
   549  0155  340A               	retlw	10
   550  0156  340D               	retlw	13
   551  0157  3400               	retlw	0
   552  0158                     STR_10:	
   553  0158  3454               	retlw	84	;'T'
   554  0159  3475               	retlw	117	;'u'
   555  015A  346E               	retlw	110	;'n'
   556  015B  3469               	retlw	105	;'i'
   557  015C  346E               	retlw	110	;'n'
   558  015D  3467               	retlw	103	;'g'
   559  015E  3420               	retlw	32	;' '
   560  015F  3472               	retlw	114	;'r'
   561  0160  3465               	retlw	101	;'e'
   562  0161  3473               	retlw	115	;'s'
   563  0162  3465               	retlw	101	;'e'
   564  0163  3474               	retlw	116	;'t'
   565  0164  3420               	retlw	32	;' '
   566  0165  3474               	retlw	116	;'t'
   567  0166  346F               	retlw	111	;'o'
   568  0167  3420               	retlw	32	;' '
   569  0168  3466               	retlw	102	;'f'
   570  0169  3461               	retlw	97	;'a'
   571  016A  3463               	retlw	99	;'c'
   572  016B  3474               	retlw	116	;'t'
   573  016C  346F               	retlw	111	;'o'
   574  016D  3472               	retlw	114	;'r'
   575  016E  3479               	retlw	121	;'y'
   576  016F  3420               	retlw	32	;' '
   577  0170  3464               	retlw	100	;'d'
   578  0171  3465               	retlw	101	;'e'
   579  0172  3466               	retlw	102	;'f'
   580  0173  3461               	retlw	97	;'a'
   581  0174  3475               	retlw	117	;'u'
   582  0175  346C               	retlw	108	;'l'
   583  0176  3474               	retlw	116	;'t'
   584  0177  3473               	retlw	115	;'s'
   585  0178  342E               	retlw	46	;'.'
   586  0179  3420               	retlw	32	;' '
   587  017A  3442               	retlw	66	;'B'
   588  017B  3465               	retlw	101	;'e'
   589  017C  3474               	retlw	116	;'t'
   590  017D  3474               	retlw	116	;'t'
   591  017E  3465               	retlw	101	;'e'
   592  017F  3472               	retlw	114	;'r'
   593  0180  3420               	retlw	32	;' '
   594  0181  3474               	retlw	116	;'t'
   595  0182  3475               	retlw	117	;'u'
   596  0183  346E               	retlw	110	;'n'
   597  0184  3465               	retlw	101	;'e'
   598  0185  3420               	retlw	32	;' '
   599  0186  3469               	retlw	105	;'i'
   600  0187  3474               	retlw	116	;'t'
   601  0188  3420               	retlw	32	;' '
   602  0189  3461               	retlw	97	;'a'
   603  018A  3467               	retlw	103	;'g'
   604  018B  3461               	retlw	97	;'a'
   605  018C  3469               	retlw	105	;'i'
   606  018D  346E               	retlw	110	;'n'
   607  018E  3421               	retlw	33	;'!'
   608  018F  340A               	retlw	10
   609  0190  340D               	retlw	13
   610  0191  3400               	retlw	0
   611  0192                     STR_9:	
   612  0192  3452               	retlw	82	;'R'
   613  0193  3465               	retlw	101	;'e'
   614  0194  3473               	retlw	115	;'s'
   615  0195  3465               	retlw	101	;'e'
   616  0196  3474               	retlw	116	;'t'
   617  0197  3474               	retlw	116	;'t'
   618  0198  3469               	retlw	105	;'i'
   619  0199  346E               	retlw	110	;'n'
   620  019A  3467               	retlw	103	;'g'
   621  019B  3420               	retlw	32	;' '
   622  019C  3474               	retlw	116	;'t'
   623  019D  3475               	retlw	117	;'u'
   624  019E  346E               	retlw	110	;'n'
   625  019F  3469               	retlw	105	;'i'
   626  01A0  346E               	retlw	110	;'n'
   627  01A1  3467               	retlw	103	;'g'
   628  01A2  3420               	retlw	32	;' '
   629  01A3  3474               	retlw	116	;'t'
   630  01A4  346F               	retlw	111	;'o'
   631  01A5  3420               	retlw	32	;' '
   632  01A6  3466               	retlw	102	;'f'
   633  01A7  3461               	retlw	97	;'a'
   634  01A8  3463               	retlw	99	;'c'
   635  01A9  3474               	retlw	116	;'t'
   636  01AA  346F               	retlw	111	;'o'
   637  01AB  3472               	retlw	114	;'r'
   638  01AC  3479               	retlw	121	;'y'
   639  01AD  3420               	retlw	32	;' '
   640  01AE  3464               	retlw	100	;'d'
   641  01AF  3465               	retlw	101	;'e'
   642  01B0  3466               	retlw	102	;'f'
   643  01B1  3461               	retlw	97	;'a'
   644  01B2  3475               	retlw	117	;'u'
   645  01B3  346C               	retlw	108	;'l'
   646  01B4  3474               	retlw	116	;'t'
   647  01B5  3473               	retlw	115	;'s'
   648  01B6  342E               	retlw	46	;'.'
   649  01B7  342E               	retlw	46	;'.'
   650  01B8  342E               	retlw	46	;'.'
   651  01B9  340A               	retlw	10
   652  01BA  340D               	retlw	13
   653  01BB  3400               	retlw	0
   654  01BC                     STR_12:	
   655  01BC  340A               	retlw	10
   656  01BD  340D               	retlw	13
   657  01BE  3452               	retlw	82	;'R'
   658  01BF  3465               	retlw	101	;'e'
   659  01C0  3464               	retlw	100	;'d'
   660  01C1  3420               	retlw	32	;' '
   661  01C2  344B               	retlw	75	;'K'
   662  01C3  3465               	retlw	101	;'e'
   663  01C4  3479               	retlw	121	;'y'
   664  01C5  3462               	retlw	98	;'b'
   665  01C6  346F               	retlw	111	;'o'
   666  01C7  3461               	retlw	97	;'a'
   667  01C8  3472               	retlw	114	;'r'
   668  01C9  3464               	retlw	100	;'d'
   669  01CA  3420               	retlw	32	;' '
   670  01CB  3462               	retlw	98	;'b'
   671  01CC  3479               	retlw	121	;'y'
   672  01CD  3420               	retlw	32	;' '
   673  01CE  344A               	retlw	74	;'J'
   674  01CF  3461               	retlw	97	;'a'
   675  01D0  346D               	retlw	109	;'m'
   676  01D1  3465               	retlw	101	;'e'
   677  01D2  3473               	retlw	115	;'s'
   678  01D3  3420               	retlw	32	;' '
   679  01D4  3448               	retlw	72	;'H'
   680  01D5  3461               	retlw	97	;'a'
   681  01D6  3467               	retlw	103	;'g'
   682  01D7  3465               	retlw	101	;'e'
   683  01D8  3472               	retlw	114	;'r'
   684  01D9  346D               	retlw	109	;'m'
   685  01DA  3461               	retlw	97	;'a'
   686  01DB  346E               	retlw	110	;'n'
   687  01DC  3420               	retlw	32	;' '
   688  01DD  3432               	retlw	50	;'2'
   689  01DE  3430               	retlw	48	;'0'
   690  01DF  3431               	retlw	49	;'1'
   691  01E0  3435               	retlw	53	;'5'
   692  01E1  340A               	retlw	10
   693  01E2  340D               	retlw	13
   694  01E3  3400               	retlw	0
   695  01E4                     STR_8:	
   696  01E4  3443               	retlw	67	;'C'
   697  01E5  3475               	retlw	117	;'u'
   698  01E6  3472               	retlw	114	;'r'
   699  01E7  3472               	retlw	114	;'r'
   700  01E8  3465               	retlw	101	;'e'
   701  01E9  346E               	retlw	110	;'n'
   702  01EA  3474               	retlw	116	;'t'
   703  01EB  3420               	retlw	32	;' '
   704  01EC  346B               	retlw	107	;'k'
   705  01ED  3465               	retlw	101	;'e'
   706  01EE  3479               	retlw	121	;'y'
   707  01EF  343A               	retlw	58	;':'
   708  01F0  3420               	retlw	32	;' '
   709  01F1  3425               	retlw	37	;'%'
   710  01F2  3469               	retlw	105	;'i'
   711  01F3  3409               	retlw	9
   712  01F4  3420               	retlw	32	;' '
   713  01F5  3443               	retlw	67	;'C'
   714  01F6  3475               	retlw	117	;'u'
   715  01F7  3472               	retlw	114	;'r'
   716  01F8  3472               	retlw	114	;'r'
   717  01F9  3465               	retlw	101	;'e'
   718  01FA  346E               	retlw	110	;'n'
   719  01FB  3474               	retlw	116	;'t'
   720  01FC  3420               	retlw	32	;' '
   721  01FD  3476               	retlw	118	;'v'
   722  01FE  3461               	retlw	97	;'a'
   723  01FF  346C               	retlw	108	;'l'
   724  0200  3475               	retlw	117	;'u'
   725  0201  3465               	retlw	101	;'e'
   726  0202  343A               	retlw	58	;':'
   727  0203  3420               	retlw	32	;' '
   728  0204  3425               	retlw	37	;'%'
   729  0205  3469               	retlw	105	;'i'
   730  0206  340A               	retlw	10
   731  0207  340D               	retlw	13
   732  0208  3400               	retlw	0
   733  0209                     STR_3:	
   734  0209  340A               	retlw	10
   735  020A  340D               	retlw	13
   736  020B  3445               	retlw	69	;'E'
   737  020C  346E               	retlw	110	;'n'
   738  020D  3474               	retlw	116	;'t'
   739  020E  3465               	retlw	101	;'e'
   740  020F  3472               	retlw	114	;'r'
   741  0210  3469               	retlw	105	;'i'
   742  0211  346E               	retlw	110	;'n'
   743  0212  3467               	retlw	103	;'g'
   744  0213  3420               	retlw	32	;' '
   745  0214  3474               	retlw	116	;'t'
   746  0215  3475               	retlw	117	;'u'
   747  0216  346E               	retlw	110	;'n'
   748  0217  3469               	retlw	105	;'i'
   749  0218  346E               	retlw	110	;'n'
   750  0219  3467               	retlw	103	;'g'
   751  021A  3420               	retlw	32	;' '
   752  021B  346D               	retlw	109	;'m'
   753  021C  346F               	retlw	111	;'o'
   754  021D  3464               	retlw	100	;'d'
   755  021E  3465               	retlw	101	;'e'
   756  021F  342E               	retlw	46	;'.'
   757  0220  342E               	retlw	46	;'.'
   758  0221  342E               	retlw	46	;'.'
   759  0222  340A               	retlw	10
   760  0223  340D               	retlw	13
   761  0224  3400               	retlw	0
   762  0225                     STR_4:	
   763  0225  344E               	retlw	78	;'N'
   764  0226  346F               	retlw	111	;'o'
   765  0227  3474               	retlw	116	;'t'
   766  0228  3465               	retlw	101	;'e'
   767  0229  343A               	retlw	58	;':'
   768  022A  3420               	retlw	32	;' '
   769  022B  3425               	retlw	37	;'%'
   770  022C  3469               	retlw	105	;'i'
   771  022D  3409               	retlw	9
   772  022E  3420               	retlw	32	;' '
   773  022F  3456               	retlw	86	;'V'
   774  0230  3461               	retlw	97	;'a'
   775  0231  346C               	retlw	108	;'l'
   776  0232  3475               	retlw	117	;'u'
   777  0233  3465               	retlw	101	;'e'
   778  0234  343A               	retlw	58	;':'
   779  0235  3420               	retlw	32	;' '
   780  0236  3425               	retlw	37	;'%'
   781  0237  3469               	retlw	105	;'i'
   782  0238  340A               	retlw	10
   783  0239  340D               	retlw	13
   784  023A  3400               	retlw	0
   785  023B                     STR_7:	
   786  023B  3443               	retlw	67	;'C'
   787  023C  3475               	retlw	117	;'u'
   788  023D  3472               	retlw	114	;'r'
   789  023E  3472               	retlw	114	;'r'
   790  023F  3465               	retlw	101	;'e'
   791  0240  346E               	retlw	110	;'n'
   792  0241  3474               	retlw	116	;'t'
   793  0242  3420               	retlw	32	;' '
   794  0243  346B               	retlw	107	;'k'
   795  0244  3465               	retlw	101	;'e'
   796  0245  3479               	retlw	121	;'y'
   797  0246  343A               	retlw	58	;':'
   798  0247  3420               	retlw	32	;' '
   799  0248  3425               	retlw	37	;'%'
   800  0249  3469               	retlw	105	;'i'
   801  024A  340A               	retlw	10
   802  024B  340D               	retlw	13
   803  024C  3400               	retlw	0
   804  024D                     STR_5:	
   805  024D  3457               	retlw	87	;'W'
   806  024E  3472               	retlw	114	;'r'
   807  024F  3469               	retlw	105	;'i'
   808  0250  3474               	retlw	116	;'t'
   809  0251  3469               	retlw	105	;'i'
   810  0252  346E               	retlw	110	;'n'
   811  0253  3467               	retlw	103	;'g'
   812  0254  3420               	retlw	32	;' '
   813  0255  3476               	retlw	118	;'v'
   814  0256  3461               	retlw	97	;'a'
   815  0257  346C               	retlw	108	;'l'
   816  0258  3475               	retlw	117	;'u'
   817  0259  3465               	retlw	101	;'e'
   818  025A  343A               	retlw	58	;':'
   819  025B  3420               	retlw	32	;' '
   820  025C  3425               	retlw	37	;'%'
   821  025D  3469               	retlw	105	;'i'
   822  025E  3400               	retlw	0
   823  025F                     STR_6:	
   824  025F  3444               	retlw	68	;'D'
   825  0260  346F               	retlw	111	;'o'
   826  0261  346E               	retlw	110	;'n'
   827  0262  3465               	retlw	101	;'e'
   828  0263  3421               	retlw	33	;'!'
   829  0264  340A               	retlw	10
   830  0265  340D               	retlw	13
   831  0266  3400               	retlw	0
   832  0267                     STR_1:	
   833  0267  342E               	retlw	46	;'.'
   834  0268  3400               	retlw	0
   835  0267                     
   836                           ; #config settings
   837  0000                     
   838                           	psect	cinit
   839  0013                     start_initialization:	
   840  0013                     __initialization:	
   841                           
   842                           ; Clear objects allocated to COMMON
   843  0013  01F9               	clrf	__pbssCOMMON& (0+127)
   844                           
   845                           ; Clear objects allocated to BANK0
   846  0014  1383               	bcf	3,7	;select IRP bank0
   847  0015  3053               	movlw	low __pbssBANK0
   848  0016  0084               	movwf	4
   849  0017  3059               	movlw	low (__pbssBANK0+6)
   850  0018  118A  2056  118A   	fcall	clear_ram0
   851                           
   852                           ; Clear objects allocated to BANK1
   853  001B  30A0               	movlw	low __pbssBANK1
   854  001C  0084               	movwf	4
   855  001D  30CE               	movlw	low (__pbssBANK1+46)
   856  001E  118A  2056  118A   	fcall	clear_ram0
   857                           
   858                           ; Initialize objects allocated to COMMON
   859  0021  118A  206B  118A   	fcall	__pidataCOMMON	;fetch initializer
   860  0024  00F7               	movwf	__pdataCOMMON& (0+127)
   861  0025  118A  206C         	fcall	__pidataCOMMON+1	;fetch initializer
   862  0027  00F8               	movwf	(__pdataCOMMON+1)& (0+127)
   863  0028                     end_of_initialization:	
   864                           ;End of C runtime variable initialization code
   865                           
   866  0028                     __end_of__initialization:	
   867  0028  0183               	clrf	3
   868  0029  118A  2E55         	ljmp	_main	;jump to C main() function
   869                           
   870                           	psect	bssCOMMON
   871  0079                     __pbssCOMMON:	
   872  0079                     _current_key:	
   873  0079                     	ds	1
   874                           
   875                           	psect	dataCOMMON
   876  0077                     __pdataCOMMON:	
   877  0077                     _key_count:	
   878  0077                     	ds	2
   879                           
   880                           	psect	bssBANK0
   881  0053                     __pbssBANK0:	
   882  0053                     _last_key:	
   883  0053                     	ds	2
   884  0055                     _pressed_keys:	
   885  0055                     	ds	2
   886  0057                     _currently_tuning:	
   887  0057                     	ds	1
   888  0058                     _in_tuning_mode:	
   889  0058                     	ds	1
   890                           
   891                           	psect	bssBANK1
   892  00A0                     __pbssBANK1:	
   893  00A0                     _tuning:	
   894  00A0                     	ds	46
   895                           
   896                           	psect	clrtext
   897  0056                     clear_ram0:	
   898                           ;	Called with FSR containing the base address, and
   899                           ;	W with the last address+1
   900                           
   901  0056  0064               	clrwdt	;clear the watchdog before getting into this loop
   902  0057                     clrloop0:	
   903  0057  0180               	clrf	0	;clear RAM location pointed to by FSR
   904  0058  0A84               	incf	4,f	;increment pointer
   905  0059  0604               	xorwf	4,w	;XOR with final address
   906  005A  1903               	btfsc	3,2	;have we reached the end yet?
   907  005B  3400               	retlw	0	;all done for this memory range, return
   908  005C  0604               	xorwf	4,w	;XOR again to restore value
   909  005D  2857               	goto	clrloop0	;do the next byte
   910                           
   911                           	psect	cstackCOMMON
   912  0070                     __pcstackCOMMON:	
   913  0070                     ?_ConfigureOscillator:	
   914  0070                     ?_InitApp:	
   915                           ; 0 bytes @ 0x0
   916                           
   917  0070                     ?_isr:	
   918                           ; 0 bytes @ 0x0
   919                           
   920  0070                     ??_isr:	
   921                           ; 0 bytes @ 0x0
   922                           
   923  0070                     ?_putch:	
   924                           ; 0 bytes @ 0x0
   925                           
   926  0070                     ?_tuningCheck:	
   927                           ; 0 bytes @ 0x0
   928                           
   929  0070                     ?_load_tuning:	
   930                           ; 0 bytes @ 0x0
   931                           
   932  0070                     ?_save_tuning:	
   933                           ; 0 bytes @ 0x0
   934                           
   935  0070                     ?_check_key_range:	
   936                           ; 0 bytes @ 0x0
   937                           
   938  0070                     ?_move_down:	
   939                           ; 0 bytes @ 0x0
   940                           
   941  0070                     ?_move_up:	
   942                           ; 0 bytes @ 0x0
   943                           
   944  0070                     ?_check_value_range:	
   945                           ; 0 bytes @ 0x0
   946                           
   947  0070                     ?_tune_down:	
   948                           ; 0 bytes @ 0x0
   949                           
   950  0070                     ?_tune_up:	
   951                           ; 0 bytes @ 0x0
   952                           
   953  0070                     ?_resetTuning:	
   954                           ; 0 bytes @ 0x0
   955                           
   956  0070                     ?_tune:	
   957                           ; 0 bytes @ 0x0
   958                           
   959  0070                     ?_play:	
   960                           ; 0 bytes @ 0x0
   961                           
   962  0070                     ?_main:	
   963                           ; 0 bytes @ 0x0
   964                           
   965  0070                     ?_eeprom_read:	
   966                           ; 0 bytes @ 0x0
   967                           
   968  0070                     ?_checkKey:	
   969                           ; 1 bytes @ 0x0
   970                           
   971                           
   972                           ; 1 bytes @ 0x0
   973  0070                     	ds	4
   974  0074                     ?_eeprom_write:	
   975  0074                     ??_eeprom_read:	
   976                           ; 0 bytes @ 0x4
   977                           
   978  0074                     ??_ConfigureOscillator:	
   979                           ; 0 bytes @ 0x4
   980                           
   981  0074                     ??_InitApp:	
   982                           ; 0 bytes @ 0x4
   983                           
   984  0074                     ??_putch:	
   985                           ; 0 bytes @ 0x4
   986                           
   987  0074                     ?_SPI_Write:	
   988                           ; 0 bytes @ 0x4
   989                           
   990  0074                     ??_checkKey:	
   991                           ; 0 bytes @ 0x4
   992                           
   993  0074                     ??___wmul:	
   994                           ; 0 bytes @ 0x4
   995                           
   996  0074                     putch@data:	
   997                           ; 0 bytes @ 0x4
   998                           
   999  0074                     eeprom_write@value:	
  1000                           ; 1 bytes @ 0x4
  1001                           
  1002  0074                     SPI_Write@data:	
  1003                           ; 1 bytes @ 0x4
  1004                           
  1005  0074                     ___wmul@product:	
  1006                           ; 2 bytes @ 0x4
  1007                           
  1008                           
  1009                           ; 2 bytes @ 0x4
  1010  0074                     	ds	1
  1011  0075                     ??_eeprom_write:	
  1012  0075                     eeprom_read@addr:	
  1013                           ; 0 bytes @ 0x5
  1014                           
  1015                           
  1016                           ; 1 bytes @ 0x5
  1017  0075                     	ds	1
  1018  0076                     ??___lwdiv:	
  1019  0076                     checkKey@keyVal:	
  1020                           ; 0 bytes @ 0x6
  1021                           
  1022  0076                     eeprom_write@addr:	
  1023                           ; 1 bytes @ 0x6
  1024                           
  1025                           
  1026                           ; 1 bytes @ 0x6
  1027  0076                     	ds	1
  1028  0077                     ??_tuningCheck:	
  1029                           
  1030                           	psect	cstackBANK0
  1031  0020                     __pcstackBANK0:	
  1032                           ; 0 bytes @ 0x7
  1033                           
  1034  0020                     ??_SPI_Write:	
  1035  0020                     ?_read16_eeprom:	
  1036                           ; 0 bytes @ 0x0
  1037                           
  1038  0020                     ?___wmul:	
  1039                           ; 2 bytes @ 0x0
  1040                           
  1041  0020                     ?_get_voltage:	
  1042                           ; 2 bytes @ 0x0
  1043                           
  1044  0020                     ___wmul@multiplier:	
  1045                           ; 4 bytes @ 0x0
  1046                           
  1047  0020                     get_voltage@keyCode:	
  1048                           ; 2 bytes @ 0x0
  1049                           
  1050                           
  1051                           ; 4 bytes @ 0x0
  1052  0020                     	ds	2
  1053  0022                     ??_read16_eeprom:	
  1054  0022                     SPI_Write@config:	
  1055                           ; 0 bytes @ 0x2
  1056                           
  1057  0022                     ___wmul@multiplicand:	
  1058                           ; 2 bytes @ 0x2
  1059                           
  1060                           
  1061                           ; 2 bytes @ 0x2
  1062  0022                     	ds	2
  1063  0024                     ??_get_voltage:	
  1064  0024                     ?___lwdiv:	
  1065                           ; 0 bytes @ 0x4
  1066                           
  1067  0024                     ___lwdiv@divisor:	
  1068                           ; 2 bytes @ 0x4
  1069                           
  1070                           
  1071                           ; 2 bytes @ 0x4
  1072  0024                     	ds	2
  1073  0026                     read16_eeprom@toRet:	
  1074  0026                     ___lwdiv@dividend:	
  1075                           ; 2 bytes @ 0x6
  1076                           
  1077                           
  1078                           ; 2 bytes @ 0x6
  1079  0026                     	ds	2
  1080  0028                     read16_eeprom@lo_byte:	
  1081  0028                     ___lwdiv@counter:	
  1082                           ; 1 bytes @ 0x8
  1083                           
  1084                           
  1085                           ; 1 bytes @ 0x8
  1086  0028                     	ds	1
  1087  0029                     read16_eeprom@hi_byte:	
  1088  0029                     ___lwdiv@quotient:	
  1089                           ; 1 bytes @ 0x9
  1090                           
  1091                           
  1092                           ; 2 bytes @ 0x9
  1093  0029                     	ds	1
  1094  002A                     read16_eeprom@addr:	
  1095                           
  1096                           ; 1 bytes @ 0xA
  1097  002A                     	ds	1
  1098  002B                     ??_load_tuning:	
  1099  002B                     ??_play:	
  1100                           ; 0 bytes @ 0xB
  1101                           
  1102  002B                     ?___lwmod:	
  1103                           ; 0 bytes @ 0xB
  1104                           
  1105  002B                     ___lwmod@divisor:	
  1106                           ; 2 bytes @ 0xB
  1107                           
  1108                           
  1109                           ; 2 bytes @ 0xB
  1110  002B                     	ds	2
  1111  002D                     play@real_value:	
  1112  002D                     ___lwmod@dividend:	
  1113                           ; 2 bytes @ 0xD
  1114                           
  1115                           
  1116                           ; 2 bytes @ 0xD
  1117  002D                     	ds	2
  1118  002F                     ??___lwmod:	
  1119                           
  1120                           ; 0 bytes @ 0xF
  1121  002F                     	ds	1
  1122  0030                     ___lwmod@counter:	
  1123                           
  1124                           ; 1 bytes @ 0x10
  1125  0030                     	ds	1
  1126  0031                     ?_printf:	
  1127  0031                     printf@f:	
  1128                           ; 2 bytes @ 0x11
  1129                           
  1130                           
  1131                           ; 2 bytes @ 0x11
  1132  0031                     	ds	6
  1133  0037                     ??_printf:	
  1134                           
  1135                           ; 0 bytes @ 0x17
  1136  0037                     	ds	3
  1137  003A                     printf@ap:	
  1138                           
  1139                           ; 1 bytes @ 0x1A
  1140  003A                     	ds	1
  1141  003B                     printf@flag:	
  1142                           
  1143                           ; 1 bytes @ 0x1B
  1144  003B                     	ds	1
  1145  003C                     printf@prec:	
  1146                           
  1147                           ; 1 bytes @ 0x1C
  1148  003C                     	ds	1
  1149  003D                     printf@val:	
  1150                           
  1151                           ; 2 bytes @ 0x1D
  1152  003D                     	ds	2
  1153  003F                     printf@c:	
  1154                           
  1155                           ; 1 bytes @ 0x1F
  1156  003F                     	ds	1
  1157  0040                     ?_write16_eeprom:	
  1158  0040                     ??_check_key_range:	
  1159                           ; 0 bytes @ 0x20
  1160                           
  1161  0040                     ??_check_value_range:	
  1162                           ; 0 bytes @ 0x20
  1163                           
  1164  0040                     write16_eeprom@value:	
  1165                           ; 0 bytes @ 0x20
  1166                           
  1167                           
  1168                           ; 2 bytes @ 0x20
  1169  0040                     	ds	2
  1170  0042                     ??_write16_eeprom:	
  1171                           
  1172                           ; 0 bytes @ 0x22
  1173  0042                     	ds	1
  1174  0043                     write16_eeprom@lo_byte:	
  1175  0043                     check_value_range@value:	
  1176                           ; 1 bytes @ 0x23
  1177                           
  1178                           
  1179                           ; 2 bytes @ 0x23
  1180  0043                     	ds	1
  1181  0044                     ??_move_down:	
  1182  0044                     ??_move_up:	
  1183                           ; 0 bytes @ 0x24
  1184                           
  1185  0044                     write16_eeprom@hi_byte:	
  1186                           ; 0 bytes @ 0x24
  1187                           
  1188                           
  1189                           ; 1 bytes @ 0x24
  1190  0044                     	ds	1
  1191  0045                     write16_eeprom@addr:	
  1192  0045                     check_value_range@key:	
  1193                           ; 1 bytes @ 0x25
  1194                           
  1195                           
  1196                           ; 1 bytes @ 0x25
  1197  0045                     	ds	1
  1198  0046                     ??_save_tuning:	
  1199  0046                     ??_tune_down:	
  1200                           ; 0 bytes @ 0x26
  1201                           
  1202  0046                     ??_tune_up:	
  1203                           ; 0 bytes @ 0x26
  1204                           
  1205                           
  1206                           ; 0 bytes @ 0x26
  1207  0046                     	ds	2
  1208  0048                     save_tuning@value:	
  1209                           
  1210                           ; 2 bytes @ 0x28
  1211  0048                     	ds	1
  1212  0049                     tune_down@value:	
  1213  0049                     tune_up@value:	
  1214                           ; 2 bytes @ 0x29
  1215                           
  1216                           
  1217                           ; 2 bytes @ 0x29
  1218  0049                     	ds	1
  1219  004A                     ??_resetTuning:	
  1220                           
  1221                           ; 0 bytes @ 0x2A
  1222  004A                     	ds	1
  1223  004B                     tune_down@key:	
  1224  004B                     tune_up@key:	
  1225                           ; 1 bytes @ 0x2B
  1226                           
  1227                           
  1228                           ; 1 bytes @ 0x2B
  1229  004B                     	ds	2
  1230  004D                     ??_tune:	
  1231                           
  1232                           ; 0 bytes @ 0x2D
  1233  004D                     	ds	3
  1234  0050                     ??_main:	
  1235                           
  1236                           ; 0 bytes @ 0x30
  1237  0050                     	ds	3
  1238                           
  1239                           	psect	maintext
  1240  0655                     __pmaintext:	
  1241 ;;
  1242 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1243 ;;
  1244 ;; *************** function _main *****************
  1245 ;; Defined at:
  1246 ;;		line 305 in file "main.c"
  1247 ;; Parameters:    Size  Location     Type
  1248 ;;		None
  1249 ;; Auto vars:     Size  Location     Type
  1250 ;;		None
  1251 ;; Return value:  Size  Location     Type
  1252 ;;		None               void
  1253 ;; Registers used:
  1254 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1255 ;; Tracked objects:
  1256 ;;		On entry : B00/0
  1257 ;;		On exit  : 0/0
  1258 ;;		Unchanged: 0/0
  1259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1260 ;;      Params:         0       0       0       0
  1261 ;;      Locals:         0       0       0       0
  1262 ;;      Temps:          0       3       0       0
  1263 ;;      Totals:         0       3       0       0
  1264 ;;Total ram usage:        3 bytes
  1265 ;; Hardware stack levels required when called:    7
  1266 ;; This function calls:
  1267 ;;		_ConfigureOscillator
  1268 ;;		_InitApp
  1269 ;;		_load_tuning
  1270 ;;		_play
  1271 ;;		_printf
  1272 ;;		_tune
  1273 ;;		_tuningCheck
  1274 ;; This function is called by:
  1275 ;;		Startup code after reset
  1276 ;; This function uses a non-reentrant model
  1277 ;;
  1278                           
  1279                           
  1280                           ;psect for function _main
  1281  0655                     _main:	
  1282                           
  1283                           ;main.c: 308: ConfigureOscillator();
  1284                           
  1285                           ;incstack = 0
  1286                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1287  0655  118A  2066  118A   	fcall	_ConfigureOscillator
  1288                           
  1289                           ;main.c: 311: InitApp();
  1290  0658  118A  25A8  118A   	fcall	_InitApp
  1291                           
  1292                           ;main.c: 313: printf("\n\rRed Keyboard by James Hagerman 2015\n\r");
  1293  065B  30BC               	movlw	low (STR_12| (0+32768))
  1294  065C  1283               	bcf	3,5	;RP0=0, select bank0
  1295  065D  1303               	bcf	3,6	;RP1=0, select bank0
  1296  065E  00B1               	movwf	printf@f
  1297  065F  3081               	movlw	high (STR_12| (0+32768))
  1298  0660  00B2               	movwf	printf@f+1
  1299  0661  118A  2269  118A   	fcall	_printf
  1300                           
  1301                           ;main.c: 316: load_tuning();
  1302  0664  118A  2705  118A   	fcall	_load_tuning
  1303                           
  1304                           ;main.c: 323: tuningCheck();
  1305  0667  118A  202B  118A   	fcall	_tuningCheck
  1306  066A                     l1958:	
  1307                           ;main.c: 324: while(in_tuning_mode) {
  1308                           
  1309  066A  1283               	bcf	3,5	;RP0=0, select bank0
  1310  066B  1303               	bcf	3,6	;RP1=0, select bank0
  1311  066C  0858               	movf	_in_tuning_mode,w
  1312  066D  1903               	btfsc	3,2
  1313  066E  2E73               	goto	l1960
  1314                           
  1315                           ;main.c: 325: tune();
  1316  066F  118A  23C7  118A   	fcall	_tune
  1317  0672  2E6A               	goto	l1958
  1318  0673                     l1960:	
  1319                           
  1320                           ;main.c: 326: }
  1321                           ;main.c: 328: _delay((unsigned long)((1000)*(8000000L/4000.0)));
  1322  0673  300B               	movlw	11
  1323  0674  00D2               	movwf	??_main+2
  1324  0675  3026               	movlw	38
  1325  0676  00D1               	movwf	??_main+1
  1326  0677  3066               	movlw	102
  1327  0678  00D0               	movwf	??_main
  1328  0679                     u1757:	
  1329  0679  0BD0               	decfsz	??_main,f
  1330  067A  2E79               	goto	u1757
  1331  067B  0BD1               	decfsz	??_main+1,f
  1332  067C  2E79               	goto	u1757
  1333  067D  0BD2               	decfsz	??_main+2,f
  1334  067E  2E79               	goto	u1757
  1335  067F  2E80               	nop2
  1336  0680                     l1962:	
  1337                           ;main.c: 329: while(1)
  1338                           
  1339                           
  1340                           ;main.c: 330: {
  1341                           ;main.c: 331: play();
  1342  0680  118A  2493  118A   	fcall	_play
  1343  0683  2E80               	goto	l1962
  1344  0684                     __end_of_main:	
  1345                           
  1346                           	psect	text1
  1347  002B                     __ptext1:	
  1348 ;; *************** function _tuningCheck *****************
  1349 ;; Defined at:
  1350 ;;		line 163 in file "main.c"
  1351 ;; Parameters:    Size  Location     Type
  1352 ;;		None
  1353 ;; Auto vars:     Size  Location     Type
  1354 ;;		None
  1355 ;; Return value:  Size  Location     Type
  1356 ;;		None               void
  1357 ;; Registers used:
  1358 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1359 ;; Tracked objects:
  1360 ;;		On entry : 0/0
  1361 ;;		On exit  : 0/0
  1362 ;;		Unchanged: 0/0
  1363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1364 ;;      Params:         0       0       0       0
  1365 ;;      Locals:         0       0       0       0
  1366 ;;      Temps:          0       0       0       0
  1367 ;;      Totals:         0       0       0       0
  1368 ;;Total ram usage:        0 bytes
  1369 ;; Hardware stack levels used:    1
  1370 ;; Hardware stack levels required when called:    3
  1371 ;; This function calls:
  1372 ;;		_checkKey
  1373 ;;		_printf
  1374 ;; This function is called by:
  1375 ;;		_main
  1376 ;; This function uses a non-reentrant model
  1377 ;;
  1378                           
  1379                           
  1380                           ;psect for function _tuningCheck
  1381  002B                     _tuningCheck:	
  1382                           
  1383                           ;main.c: 167: if (checkKey(21) && checkKey(22)) {
  1384                           
  1385                           ;incstack = 0
  1386                           ; Regs used in _tuningCheck: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1387  002B  3015               	movlw	21
  1388  002C  118A  2331  118A   	fcall	_checkKey
  1389  002F  3A00               	xorlw	0
  1390  0030  1903               	skipnz
  1391  0031  0008               	return
  1392  0032  3016               	movlw	22
  1393  0033  118A  2331  118A   	fcall	_checkKey
  1394  0036  3A00               	xorlw	0
  1395  0037  1903               	skipnz
  1396  0038  0008               	return
  1397                           
  1398                           ;main.c: 168: in_tuning_mode = 1;
  1399  0039  1283               	bcf	3,5	;RP0=0, select bank0
  1400  003A  1303               	bcf	3,6	;RP1=0, select bank0
  1401  003B  01D8               	clrf	_in_tuning_mode
  1402  003C  0AD8               	incf	_in_tuning_mode,f
  1403                           
  1404                           ;main.c: 169: printf("\n\rEntering tuning mode...\n\r");
  1405  003D  3009               	movlw	low (STR_3| (0+32768))
  1406  003E  00B1               	movwf	printf@f
  1407  003F  3082               	movlw	high (STR_3| (0+32768))
  1408  0040  00B2               	movwf	printf@f+1
  1409  0041  118A  2269         	fcall	_printf
  1410  0043  0008               	return
  1411  0044                     __end_of_tuningCheck:	
  1412                           
  1413                           	psect	text2
  1414  03C7                     __ptext2:	
  1415 ;; *************** function _tune *****************
  1416 ;; Defined at:
  1417 ;;		line 240 in file "main.c"
  1418 ;; Parameters:    Size  Location     Type
  1419 ;;		None
  1420 ;; Auto vars:     Size  Location     Type
  1421 ;;		None
  1422 ;; Return value:  Size  Location     Type
  1423 ;;		None               void
  1424 ;; Registers used:
  1425 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1426 ;; Tracked objects:
  1427 ;;		On entry : 0/0
  1428 ;;		On exit  : 0/0
  1429 ;;		Unchanged: 0/0
  1430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1431 ;;      Params:         0       0       0       0
  1432 ;;      Locals:         0       0       0       0
  1433 ;;      Temps:          0       3       0       0
  1434 ;;      Totals:         0       3       0       0
  1435 ;;Total ram usage:        3 bytes
  1436 ;; Hardware stack levels used:    1
  1437 ;; Hardware stack levels required when called:    6
  1438 ;; This function calls:
  1439 ;;		_SPI_Write
  1440 ;;		_checkKey
  1441 ;;		_move_down
  1442 ;;		_move_up
  1443 ;;		_resetTuning
  1444 ;;		_save_tuning
  1445 ;;		_tune_down
  1446 ;;		_tune_up
  1447 ;; This function is called by:
  1448 ;;		_main
  1449 ;; This function uses a non-reentrant model
  1450 ;;
  1451                           
  1452                           
  1453                           ;psect for function _tune
  1454  03C7                     _tune:	
  1455                           
  1456                           ;main.c: 242: _delay((unsigned long)((100)*(8000000L/4000.0)));
  1457                           
  1458                           ;incstack = 0
  1459                           ; Regs used in _tune: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1460  03C7  3002               	movlw	2
  1461  03C8  1283               	bcf	3,5	;RP0=0, select bank0
  1462  03C9  1303               	bcf	3,6	;RP1=0, select bank0
  1463  03CA  00CF               	movwf	??_tune+2
  1464  03CB  3004               	movlw	4
  1465  03CC  00CE               	movwf	??_tune+1
  1466  03CD  30BA               	movlw	186
  1467  03CE  00CD               	movwf	??_tune
  1468  03CF                     u1767:	
  1469  03CF  0BCD               	decfsz	??_tune,f
  1470  03D0  2BCF               	goto	u1767
  1471  03D1  0BCE               	decfsz	??_tune+1,f
  1472  03D2  2BCF               	goto	u1767
  1473  03D3  0BCF               	decfsz	??_tune+2,f
  1474  03D4  2BCF               	goto	u1767
  1475  03D5  0000               	nop
  1476                           
  1477                           ;main.c: 245: for (current_key = 0; current_key < key_count; current_key += 1) {
  1478  03D6  01F9               	clrf	_current_key
  1479  03D7  2C07               	goto	l1914
  1480  03D8                     l1892:	
  1481                           ;main.c: 251: break;
  1482                           
  1483                           
  1484                           ;main.c: 252: }
  1485                           ;main.c: 255: if (current_key == 19) {
  1486  03D8  3013               	movlw	19
  1487  03D9  0679               	xorwf	_current_key,w
  1488  03DA  1D03               	btfss	3,2
  1489  03DB  2BDF               	goto	l1896
  1490                           
  1491                           ;main.c: 256: move_up();
  1492  03DC  118A  2044  118A   	fcall	_move_up
  1493  03DF                     l1896:	
  1494                           
  1495                           ;main.c: 257: }
  1496                           ;main.c: 258: if (current_key == 17) {
  1497  03DF  3011               	movlw	17
  1498  03E0  0679               	xorwf	_current_key,w
  1499  03E1  1D03               	btfss	3,2
  1500  03E2  2BE6               	goto	l1900
  1501                           
  1502                           ;main.c: 259: move_down();
  1503  03E3  118A  204D  118A   	fcall	_move_down
  1504  03E6                     l1900:	
  1505                           
  1506                           ;main.c: 260: }
  1507                           ;main.c: 263: if (current_key == 18) {
  1508  03E6  3012               	movlw	18
  1509  03E7  0679               	xorwf	_current_key,w
  1510  03E8  1D03               	btfss	3,2
  1511  03E9  2BF0               	goto	l1904
  1512                           
  1513                           ;main.c: 264: tune_down(currently_tuning);
  1514  03EA  1283               	bcf	3,5	;RP0=0, select bank0
  1515  03EB  1303               	bcf	3,6	;RP1=0, select bank0
  1516  03EC  0857               	movf	_currently_tuning,w
  1517  03ED  118A  2777  118A   	fcall	_tune_down
  1518  03F0                     l1904:	
  1519                           
  1520                           ;main.c: 265: }
  1521                           ;main.c: 266: if (current_key == 20) {
  1522  03F0  3014               	movlw	20
  1523  03F1  0679               	xorwf	_current_key,w
  1524  03F2  1D03               	btfss	3,2
  1525  03F3  2BFA               	goto	l1908
  1526                           
  1527                           ;main.c: 267: tune_up(currently_tuning);
  1528  03F4  1283               	bcf	3,5	;RP0=0, select bank0
  1529  03F5  1303               	bcf	3,6	;RP1=0, select bank0
  1530  03F6  0857               	movf	_currently_tuning,w
  1531  03F7  118A  2753  118A   	fcall	_tune_up
  1532  03FA                     l1908:	
  1533                           
  1534                           ;main.c: 268: }
  1535                           ;main.c: 270: if (current_key == 5) {
  1536  03FA  3005               	movlw	5
  1537  03FB  0679               	xorwf	_current_key,w
  1538  03FC  1D03               	btfss	3,2
  1539  03FD  2C01               	goto	l1912
  1540                           
  1541                           ;main.c: 271: resetTuning();
  1542  03FE  118A  2434  118A   	fcall	_resetTuning
  1543  0401                     l1912:	
  1544  0401  3001               	movlw	1
  1545  0402  1283               	bcf	3,5	;RP0=0, select bank0
  1546  0403  1303               	bcf	3,6	;RP1=0, select bank0
  1547  0404  00CD               	movwf	??_tune
  1548  0405  084D               	movf	??_tune,w
  1549  0406  07F9               	addwf	_current_key,f
  1550  0407                     l1914:	
  1551  0407  0879               	movf	_current_key,w
  1552  0408  1283               	bcf	3,5	;RP0=0, select bank0
  1553  0409  1303               	bcf	3,6	;RP1=0, select bank0
  1554  040A  00CD               	movwf	??_tune
  1555  040B  01CE               	clrf	??_tune+1
  1556  040C  0878               	movf	_key_count+1,w
  1557  040D  024E               	subwf	??_tune+1,w
  1558  040E  1D03               	skipz
  1559  040F  2C12               	goto	u1695
  1560  0410  0877               	movf	_key_count,w
  1561  0411  024D               	subwf	??_tune,w
  1562  0412                     u1695:	
  1563  0412  1803               	btfsc	3,0
  1564  0413  2C24               	goto	l1916
  1565                           
  1566                           ;main.c: 246: if (checkKey(current_key)) {
  1567  0414  0879               	movf	_current_key,w
  1568  0415  118A  2331  118A   	fcall	_checkKey
  1569  0418  3A00               	xorlw	0
  1570  0419  1903               	skipnz
  1571  041A  2C01               	goto	l1912
  1572                           
  1573                           ;main.c: 248: if (current_key == 0) {
  1574  041B  0879               	movf	_current_key,w
  1575  041C  1D03               	btfss	3,2
  1576  041D  2BD8               	goto	l1892
  1577                           
  1578                           ;main.c: 249: in_tuning_mode = 0;
  1579  041E  1283               	bcf	3,5	;RP0=0, select bank0
  1580  041F  1303               	bcf	3,6	;RP1=0, select bank0
  1581  0420  01D8               	clrf	_in_tuning_mode
  1582                           
  1583                           ;main.c: 250: save_tuning();
  1584  0421  118A  2528  118A   	fcall	_save_tuning
  1585  0424                     l1916:	
  1586                           
  1587                           ;main.c: 272: }
  1588                           ;main.c: 274: }
  1589                           ;main.c: 275: }
  1590                           ;main.c: 276: SPI_Write(tuning[currently_tuning]);
  1591  0424  1283               	bcf	3,5	;RP0=0, select bank0
  1592  0425  1303               	bcf	3,6	;RP1=0, select bank0
  1593  0426  0857               	movf	_currently_tuning,w
  1594  0427  00CD               	movwf	??_tune
  1595  0428  074D               	addwf	??_tune,w
  1596  0429  3EA0               	addlw	(low (_tuning| 0))& (0+255)
  1597  042A  0084               	movwf	4
  1598  042B  1383               	bcf	3,7	;select IRP bank1
  1599  042C  0800               	movf	0,w
  1600  042D  00F4               	movwf	SPI_Write@data
  1601  042E  0A84               	incf	4,f
  1602  042F  0800               	movf	0,w
  1603  0430  00F5               	movwf	SPI_Write@data+1
  1604  0431  118A  26B0         	fcall	_SPI_Write
  1605  0433  0008               	return
  1606  0434                     __end_of_tune:	
  1607                           
  1608                           	psect	text3
  1609  0753                     __ptext3:	
  1610 ;; *************** function _tune_up *****************
  1611 ;; Defined at:
  1612 ;;		line 224 in file "main.c"
  1613 ;; Parameters:    Size  Location     Type
  1614 ;;  key             1    wreg     unsigned char 
  1615 ;; Auto vars:     Size  Location     Type
  1616 ;;  key             1   43[BANK0 ] unsigned char 
  1617 ;;  value           2   41[BANK0 ] unsigned int 
  1618 ;; Return value:  Size  Location     Type
  1619 ;;		None               void
  1620 ;; Registers used:
  1621 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1622 ;; Tracked objects:
  1623 ;;		On entry : 0/0
  1624 ;;		On exit  : 0/0
  1625 ;;		Unchanged: 0/0
  1626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1627 ;;      Params:         0       0       0       0
  1628 ;;      Locals:         0       3       0       0
  1629 ;;      Temps:          0       3       0       0
  1630 ;;      Totals:         0       6       0       0
  1631 ;;Total ram usage:        6 bytes
  1632 ;; Hardware stack levels used:    1
  1633 ;; Hardware stack levels required when called:    4
  1634 ;; This function calls:
  1635 ;;		_check_value_range
  1636 ;; This function is called by:
  1637 ;;		_tune
  1638 ;; This function uses a non-reentrant model
  1639 ;;
  1640                           
  1641                           
  1642                           ;psect for function _tune_up
  1643  0753                     _tune_up:	
  1644                           
  1645                           ;incstack = 0
  1646                           ; Regs used in _tune_up: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1647                           ;tune_up@key stored from wreg
  1648  0753  1283               	bcf	3,5	;RP0=0, select bank0
  1649  0754  1303               	bcf	3,6	;RP1=0, select bank0
  1650  0755  00CB               	movwf	tune_up@key
  1651                           
  1652                           ;main.c: 225: uint16_t value = tuning[key];
  1653  0756  084B               	movf	tune_up@key,w
  1654  0757  00C6               	movwf	??_tune_up
  1655  0758  0746               	addwf	??_tune_up,w
  1656  0759  3EA0               	addlw	(low (_tuning| 0))& (0+255)
  1657  075A  0084               	movwf	4
  1658  075B  1383               	bcf	3,7	;select IRP bank1
  1659  075C  0800               	movf	0,w
  1660  075D  00C9               	movwf	tune_up@value
  1661  075E  0A84               	incf	4,f
  1662  075F  0800               	movf	0,w
  1663  0760  00CA               	movwf	tune_up@value+1
  1664                           
  1665                           ;main.c: 226: tuning[key] = value + 1;
  1666  0761  0849               	movf	tune_up@value,w
  1667  0762  3E01               	addlw	1
  1668  0763  00C6               	movwf	??_tune_up
  1669  0764  084A               	movf	tune_up@value+1,w
  1670  0765  1803               	skipnc
  1671  0766  3E01               	addlw	1
  1672  0767  3E00               	addlw	0
  1673  0768  00C7               	movwf	??_tune_up+1
  1674  0769  084B               	movf	tune_up@key,w
  1675  076A  00C8               	movwf	??_tune_up+2
  1676  076B  0748               	addwf	??_tune_up+2,w
  1677  076C  3EA0               	addlw	(low (_tuning| 0))& (0+255)
  1678  076D  0084               	movwf	4
  1679  076E  0846               	movf	??_tune_up,w
  1680  076F  0080               	movwf	0
  1681  0770  0A84               	incf	4,f
  1682  0771  0847               	movf	??_tune_up+1,w
  1683  0772  0080               	movwf	0
  1684                           
  1685                           ;main.c: 227: check_value_range(key);
  1686  0773  084B               	movf	tune_up@key,w
  1687  0774  118A  24E1         	fcall	_check_value_range
  1688  0776  0008               	return
  1689  0777                     __end_of_tune_up:	
  1690                           
  1691                           	psect	text4
  1692  0777                     __ptext4:	
  1693 ;; *************** function _tune_down *****************
  1694 ;; Defined at:
  1695 ;;		line 219 in file "main.c"
  1696 ;; Parameters:    Size  Location     Type
  1697 ;;  key             1    wreg     unsigned char 
  1698 ;; Auto vars:     Size  Location     Type
  1699 ;;  key             1   43[BANK0 ] unsigned char 
  1700 ;;  value           2   41[BANK0 ] unsigned int 
  1701 ;; Return value:  Size  Location     Type
  1702 ;;		None               void
  1703 ;; Registers used:
  1704 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1705 ;; Tracked objects:
  1706 ;;		On entry : 0/0
  1707 ;;		On exit  : 0/0
  1708 ;;		Unchanged: 0/0
  1709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1710 ;;      Params:         0       0       0       0
  1711 ;;      Locals:         0       3       0       0
  1712 ;;      Temps:          0       3       0       0
  1713 ;;      Totals:         0       6       0       0
  1714 ;;Total ram usage:        6 bytes
  1715 ;; Hardware stack levels used:    1
  1716 ;; Hardware stack levels required when called:    4
  1717 ;; This function calls:
  1718 ;;		_check_value_range
  1719 ;; This function is called by:
  1720 ;;		_tune
  1721 ;; This function uses a non-reentrant model
  1722 ;;
  1723                           
  1724                           
  1725                           ;psect for function _tune_down
  1726  0777                     _tune_down:	
  1727                           
  1728                           ;incstack = 0
  1729                           ; Regs used in _tune_down: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1730                           ;tune_down@key stored from wreg
  1731  0777  1283               	bcf	3,5	;RP0=0, select bank0
  1732  0778  1303               	bcf	3,6	;RP1=0, select bank0
  1733  0779  00CB               	movwf	tune_down@key
  1734                           
  1735                           ;main.c: 220: uint16_t value = tuning[key];
  1736  077A  084B               	movf	tune_down@key,w
  1737  077B  00C6               	movwf	??_tune_down
  1738  077C  0746               	addwf	??_tune_down,w
  1739  077D  3EA0               	addlw	(low (_tuning| 0))& (0+255)
  1740  077E  0084               	movwf	4
  1741  077F  1383               	bcf	3,7	;select IRP bank1
  1742  0780  0800               	movf	0,w
  1743  0781  00C9               	movwf	tune_down@value
  1744  0782  0A84               	incf	4,f
  1745  0783  0800               	movf	0,w
  1746  0784  00CA               	movwf	tune_down@value+1
  1747                           
  1748                           ;main.c: 221: tuning[key] = value - 1;
  1749  0785  0849               	movf	tune_down@value,w
  1750  0786  3EFF               	addlw	255
  1751  0787  00C6               	movwf	??_tune_down
  1752  0788  084A               	movf	tune_down@value+1,w
  1753  0789  1803               	skipnc
  1754  078A  3E01               	addlw	1
  1755  078B  3EFF               	addlw	255
  1756  078C  00C7               	movwf	??_tune_down+1
  1757  078D  084B               	movf	tune_down@key,w
  1758  078E  00C8               	movwf	??_tune_down+2
  1759  078F  0748               	addwf	??_tune_down+2,w
  1760  0790  3EA0               	addlw	(low (_tuning| 0))& (0+255)
  1761  0791  0084               	movwf	4
  1762  0792  0846               	movf	??_tune_down,w
  1763  0793  0080               	movwf	0
  1764  0794  0A84               	incf	4,f
  1765  0795  0847               	movf	??_tune_down+1,w
  1766  0796  0080               	movwf	0
  1767                           
  1768                           ;main.c: 222: check_value_range(key);
  1769  0797  084B               	movf	tune_down@key,w
  1770  0798  118A  24E1         	fcall	_check_value_range
  1771  079A  0008               	return
  1772  079B                     __end_of_tune_down:	
  1773                           
  1774                           	psect	text5
  1775  04E1                     __ptext5:	
  1776 ;; *************** function _check_value_range *****************
  1777 ;; Defined at:
  1778 ;;		line 209 in file "main.c"
  1779 ;; Parameters:    Size  Location     Type
  1780 ;;  key             1    wreg     unsigned char 
  1781 ;; Auto vars:     Size  Location     Type
  1782 ;;  key             1   37[BANK0 ] unsigned char 
  1783 ;;  value           2   35[BANK0 ] unsigned int 
  1784 ;; Return value:  Size  Location     Type
  1785 ;;		None               void
  1786 ;; Registers used:
  1787 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1788 ;; Tracked objects:
  1789 ;;		On entry : 0/0
  1790 ;;		On exit  : 0/0
  1791 ;;		Unchanged: 0/0
  1792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1793 ;;      Params:         0       0       0       0
  1794 ;;      Locals:         0       3       0       0
  1795 ;;      Temps:          0       3       0       0
  1796 ;;      Totals:         0       6       0       0
  1797 ;;Total ram usage:        6 bytes
  1798 ;; Hardware stack levels used:    1
  1799 ;; Hardware stack levels required when called:    3
  1800 ;; This function calls:
  1801 ;;		_printf
  1802 ;; This function is called by:
  1803 ;;		_tune_down
  1804 ;;		_tune_up
  1805 ;; This function uses a non-reentrant model
  1806 ;;
  1807                           
  1808                           
  1809                           ;psect for function _check_value_range
  1810  04E1                     _check_value_range:	
  1811                           
  1812                           ;incstack = 0
  1813                           ; Regs used in _check_value_range: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1814                           ;check_value_range@key stored from wreg
  1815  04E1  1283               	bcf	3,5	;RP0=0, select bank0
  1816  04E2  1303               	bcf	3,6	;RP1=0, select bank0
  1817  04E3  00C5               	movwf	check_value_range@key
  1818                           
  1819                           ;main.c: 210: uint16_t value = tuning[key];
  1820  04E4  0845               	movf	check_value_range@key,w
  1821  04E5  00C0               	movwf	??_check_value_range
  1822  04E6  0740               	addwf	??_check_value_range,w
  1823  04E7  3EA0               	addlw	(low (_tuning| 0))& (0+255)
  1824  04E8  0084               	movwf	4
  1825  04E9  1383               	bcf	3,7	;select IRP bank1
  1826  04EA  0800               	movf	0,w
  1827  04EB  00C3               	movwf	check_value_range@value
  1828  04EC  0A84               	incf	4,f
  1829  04ED  0800               	movf	0,w
  1830  04EE  00C4               	movwf	check_value_range@value+1
  1831                           
  1832                           ;main.c: 211: if (value > 5000 ) {
  1833  04EF  3013               	movlw	19
  1834  04F0  0244               	subwf	check_value_range@value+1,w
  1835  04F1  3089               	movlw	137
  1836  04F2  1903               	skipnz
  1837  04F3  0243               	subwf	check_value_range@value,w
  1838  04F4  1C03               	skipc
  1839  04F5  2CFF               	goto	l1794
  1840                           
  1841                           ;main.c: 212: tuning[key] = 0;
  1842  04F6  0845               	movf	check_value_range@key,w
  1843  04F7  00C0               	movwf	??_check_value_range
  1844  04F8  0740               	addwf	??_check_value_range,w
  1845  04F9  3EA0               	addlw	(low (_tuning| 0))& (0+255)
  1846  04FA  0084               	movwf	4
  1847  04FB  0180               	clrf	0
  1848  04FC  0A84               	incf	4,f
  1849  04FD  0180               	clrf	0
  1850                           
  1851                           ;main.c: 213: } else if (value > 4095) {
  1852  04FE  2D10               	goto	l1798
  1853  04FF                     l1794:	
  1854  04FF  3010               	movlw	16
  1855  0500  0244               	subwf	check_value_range@value+1,w
  1856  0501  3000               	movlw	0
  1857  0502  1903               	skipnz
  1858  0503  0243               	subwf	check_value_range@value,w
  1859  0504  1C03               	skipc
  1860  0505  2D10               	goto	l1798
  1861                           
  1862                           ;main.c: 214: tuning[key] = 4095;
  1863  0506  0845               	movf	check_value_range@key,w
  1864  0507  00C0               	movwf	??_check_value_range
  1865  0508  0740               	addwf	??_check_value_range,w
  1866  0509  3EA0               	addlw	(low (_tuning| 0))& (0+255)
  1867  050A  0084               	movwf	4
  1868  050B  30FF               	movlw	255
  1869  050C  0080               	movwf	0
  1870  050D  0A84               	incf	4,f
  1871  050E  300F               	movlw	15
  1872  050F  0080               	movwf	0
  1873  0510                     l1798:	
  1874                           
  1875                           ;main.c: 215: }
  1876                           ;main.c: 216: printf("Current key: %i\t Current value: %i\n\r", key, tuning[key]);
  1877  0510  30E4               	movlw	low (STR_8| (0+32768))
  1878  0511  00B1               	movwf	printf@f
  1879  0512  3081               	movlw	high (STR_8| (0+32768))
  1880  0513  00B2               	movwf	printf@f+1
  1881  0514  0845               	movf	check_value_range@key,w
  1882  0515  00C0               	movwf	??_check_value_range
  1883  0516  01C1               	clrf	??_check_value_range+1
  1884  0517  0840               	movf	??_check_value_range,w
  1885  0518  00B3               	movwf	?_printf+2
  1886  0519  0841               	movf	??_check_value_range+1,w
  1887  051A  00B4               	movwf	?_printf+3
  1888  051B  0845               	movf	check_value_range@key,w
  1889  051C  00C2               	movwf	??_check_value_range+2
  1890  051D  0742               	addwf	??_check_value_range+2,w
  1891  051E  3EA0               	addlw	(low (_tuning| 0))& (0+255)
  1892  051F  0084               	movwf	4
  1893  0520  0800               	movf	0,w
  1894  0521  00B5               	movwf	?_printf+4
  1895  0522  0A84               	incf	4,f
  1896  0523  0800               	movf	0,w
  1897  0524  00B6               	movwf	?_printf+5
  1898  0525  118A  2269         	fcall	_printf
  1899  0527  0008               	return
  1900  0528                     __end_of_check_value_range:	
  1901                           
  1902                           	psect	text6
  1903  0434                     __ptext6:	
  1904 ;; *************** function _resetTuning *****************
  1905 ;; Defined at:
  1906 ;;		line 230 in file "main.c"
  1907 ;; Parameters:    Size  Location     Type
  1908 ;;		None
  1909 ;; Auto vars:     Size  Location     Type
  1910 ;;		None
  1911 ;; Return value:  Size  Location     Type
  1912 ;;		None               void
  1913 ;; Registers used:
  1914 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1915 ;; Tracked objects:
  1916 ;;		On entry : 0/0
  1917 ;;		On exit  : 0/0
  1918 ;;		Unchanged: 0/0
  1919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1920 ;;      Params:         0       0       0       0
  1921 ;;      Locals:         0       0       0       0
  1922 ;;      Temps:          0       3       0       0
  1923 ;;      Totals:         0       3       0       0
  1924 ;;Total ram usage:        3 bytes
  1925 ;; Hardware stack levels used:    1
  1926 ;; Hardware stack levels required when called:    5
  1927 ;; This function calls:
  1928 ;;		___lwdiv
  1929 ;;		___wmul
  1930 ;;		_printf
  1931 ;;		_save_tuning
  1932 ;; This function is called by:
  1933 ;;		_tune
  1934 ;; This function uses a non-reentrant model
  1935 ;;
  1936                           
  1937                           
  1938                           ;psect for function _resetTuning
  1939  0434                     _resetTuning:	
  1940                           
  1941                           ;main.c: 231: printf("Resetting tuning to factory defaults...\n\r");
  1942                           
  1943                           ;incstack = 0
  1944                           ; Regs used in _resetTuning: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1945  0434  3092               	movlw	low (STR_9| (0+32768))
  1946  0435  1283               	bcf	3,5	;RP0=0, select bank0
  1947  0436  1303               	bcf	3,6	;RP1=0, select bank0
  1948  0437  00B1               	movwf	printf@f
  1949  0438  3081               	movlw	high (STR_9| (0+32768))
  1950  0439  00B2               	movwf	printf@f+1
  1951  043A  118A  2269  118A   	fcall	_printf
  1952                           
  1953                           ;main.c: 232: for (current_key = 0; current_key < key_count; current_key += 1) {
  1954  043D  01F9               	clrf	_current_key
  1955  043E                     l1860:	
  1956  043E  0879               	movf	_current_key,w
  1957  043F  1283               	bcf	3,5	;RP0=0, select bank0
  1958  0440  1303               	bcf	3,6	;RP1=0, select bank0
  1959  0441  00CA               	movwf	??_resetTuning
  1960  0442  01CB               	clrf	??_resetTuning+1
  1961  0443  0878               	movf	_key_count+1,w
  1962  0444  024B               	subwf	??_resetTuning+1,w
  1963  0445  1D03               	skipz
  1964  0446  2C49               	goto	u1585
  1965  0447  0877               	movf	_key_count,w
  1966  0448  024A               	subwf	??_resetTuning,w
  1967  0449                     u1585:	
  1968  0449  1803               	btfsc	3,0
  1969  044A  2C7E               	goto	l1862
  1970                           
  1971                           ;main.c: 233: tuning[current_key] = (current_key * 1502) / (key_count-1);
  1972  044B  0877               	movf	_key_count,w
  1973  044C  3EFF               	addlw	255
  1974  044D  1283               	bcf	3,5	;RP0=0, select bank0
  1975  044E  1303               	bcf	3,6	;RP1=0, select bank0
  1976  044F  00A4               	movwf	___lwdiv@divisor
  1977  0450  0878               	movf	_key_count+1,w
  1978  0451  1803               	skipnc
  1979  0452  3E01               	addlw	1
  1980  0453  3EFF               	addlw	255
  1981  0454  00A5               	movwf	___lwdiv@divisor+1
  1982  0455  0879               	movf	_current_key,w
  1983  0456  00CA               	movwf	??_resetTuning
  1984  0457  01CB               	clrf	??_resetTuning+1
  1985  0458  084A               	movf	??_resetTuning,w
  1986  0459  00A0               	movwf	___wmul@multiplier
  1987  045A  084B               	movf	??_resetTuning+1,w
  1988  045B  00A1               	movwf	___wmul@multiplier+1
  1989  045C  30DE               	movlw	222
  1990  045D  00A2               	movwf	___wmul@multiplicand
  1991  045E  3005               	movlw	5
  1992  045F  00A3               	movwf	___wmul@multiplicand+1
  1993  0460  118A  279B  118A   	fcall	___wmul
  1994  0463  1283               	bcf	3,5	;RP0=0, select bank0
  1995  0464  1303               	bcf	3,6	;RP1=0, select bank0
  1996  0465  0821               	movf	?___wmul+1,w
  1997  0466  00A7               	movwf	___lwdiv@dividend+1
  1998  0467  0820               	movf	?___wmul,w
  1999  0468  00A6               	movwf	___lwdiv@dividend
  2000  0469  118A  256A  118A   	fcall	___lwdiv
  2001  046C  0879               	movf	_current_key,w
  2002  046D  1283               	bcf	3,5	;RP0=0, select bank0
  2003  046E  1303               	bcf	3,6	;RP1=0, select bank0
  2004  046F  00CC               	movwf	??_resetTuning+2
  2005  0470  074C               	addwf	??_resetTuning+2,w
  2006  0471  3EA0               	addlw	(low (_tuning| 0))& (0+255)
  2007  0472  0084               	movwf	4
  2008  0473  0824               	movf	?___lwdiv,w
  2009  0474  1383               	bcf	3,7	;select IRP bank1
  2010  0475  0080               	movwf	0
  2011  0476  0A84               	incf	4,f
  2012  0477  0825               	movf	?___lwdiv+1,w
  2013  0478  0080               	movwf	0
  2014  0479  3001               	movlw	1
  2015  047A  00CA               	movwf	??_resetTuning
  2016  047B  084A               	movf	??_resetTuning,w
  2017  047C  07F9               	addwf	_current_key,f
  2018  047D  2C3E               	goto	l1860
  2019  047E                     l1862:	
  2020                           
  2021                           ;main.c: 234: }
  2022                           ;main.c: 235: save_tuning();
  2023  047E  118A  2528  118A   	fcall	_save_tuning
  2024                           
  2025                           ;main.c: 236: printf("Tuning reset to factory defaults. Better tune it again!\n\r");
  2026  0481  3058               	movlw	low (STR_10| (0+32768))
  2027  0482  1283               	bcf	3,5	;RP0=0, select bank0
  2028  0483  1303               	bcf	3,6	;RP1=0, select bank0
  2029  0484  00B1               	movwf	printf@f
  2030  0485  3081               	movlw	high (STR_10| (0+32768))
  2031  0486  00B2               	movwf	printf@f+1
  2032  0487  118A  2269  118A   	fcall	_printf
  2033                           
  2034                           ;main.c: 237: printf("We'll put you back in tuning mode so you can fix it now. \n\r");
  2035  048A  301C               	movlw	low (STR_11| (0+32768))
  2036  048B  1283               	bcf	3,5	;RP0=0, select bank0
  2037  048C  1303               	bcf	3,6	;RP1=0, select bank0
  2038  048D  00B1               	movwf	printf@f
  2039  048E  3081               	movlw	high (STR_11| (0+32768))
  2040  048F  00B2               	movwf	printf@f+1
  2041  0490  118A  2269         	fcall	_printf
  2042  0492  0008               	return
  2043  0493                     __end_of_resetTuning:	
  2044                           
  2045                           	psect	text7
  2046  0528                     __ptext7:	
  2047 ;; *************** function _save_tuning *****************
  2048 ;; Defined at:
  2049 ;;		line 184 in file "main.c"
  2050 ;; Parameters:    Size  Location     Type
  2051 ;;		None
  2052 ;; Auto vars:     Size  Location     Type
  2053 ;;  value           2   40[BANK0 ] unsigned int 
  2054 ;; Return value:  Size  Location     Type
  2055 ;;		None               void
  2056 ;; Registers used:
  2057 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2058 ;; Tracked objects:
  2059 ;;		On entry : 0/0
  2060 ;;		On exit  : 0/0
  2061 ;;		Unchanged: 0/0
  2062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2063 ;;      Params:         0       0       0       0
  2064 ;;      Locals:         0       2       0       0
  2065 ;;      Temps:          0       2       0       0
  2066 ;;      Totals:         0       4       0       0
  2067 ;;Total ram usage:        4 bytes
  2068 ;; Hardware stack levels used:    1
  2069 ;; Hardware stack levels required when called:    4
  2070 ;; This function calls:
  2071 ;;		_printf
  2072 ;;		_write16_eeprom
  2073 ;; This function is called by:
  2074 ;;		_resetTuning
  2075 ;;		_tune
  2076 ;; This function uses a non-reentrant model
  2077 ;;
  2078                           
  2079                           
  2080                           ;psect for function _save_tuning
  2081  0528                     _save_tuning:	
  2082                           
  2083                           ;main.c: 185: for (current_key = 0; current_key < key_count; current_key += 1) {
  2084                           
  2085                           ;incstack = 0
  2086                           ; Regs used in _save_tuning: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2087  0528  01F9               	clrf	_current_key
  2088  0529                     l1776:	
  2089  0529  0879               	movf	_current_key,w
  2090  052A  1283               	bcf	3,5	;RP0=0, select bank0
  2091  052B  1303               	bcf	3,6	;RP1=0, select bank0
  2092  052C  00C6               	movwf	??_save_tuning
  2093  052D  01C7               	clrf	??_save_tuning+1
  2094  052E  0878               	movf	_key_count+1,w
  2095  052F  0247               	subwf	??_save_tuning+1,w
  2096  0530  1D03               	skipz
  2097  0531  2D34               	goto	u1475
  2098  0532  0877               	movf	_key_count,w
  2099  0533  0246               	subwf	??_save_tuning,w
  2100  0534                     u1475:	
  2101  0534  1803               	btfsc	3,0
  2102  0535  0008               	return
  2103                           
  2104                           ;main.c: 186: uint16_t value = tuning[current_key];
  2105  0536  0879               	movf	_current_key,w
  2106  0537  1283               	bcf	3,5	;RP0=0, select bank0
  2107  0538  1303               	bcf	3,6	;RP1=0, select bank0
  2108  0539  00C6               	movwf	??_save_tuning
  2109  053A  0746               	addwf	??_save_tuning,w
  2110  053B  3EA0               	addlw	(low (_tuning| 0))& (0+255)
  2111  053C  0084               	movwf	4
  2112  053D  1383               	bcf	3,7	;select IRP bank1
  2113  053E  0800               	movf	0,w
  2114  053F  00C8               	movwf	save_tuning@value
  2115  0540  0A84               	incf	4,f
  2116  0541  0800               	movf	0,w
  2117  0542  00C9               	movwf	save_tuning@value+1
  2118                           
  2119                           ;main.c: 187: printf("Writing value: %i", value);
  2120  0543  304D               	movlw	low (STR_5| (0+32768))
  2121  0544  00B1               	movwf	printf@f
  2122  0545  3082               	movlw	high (STR_5| (0+32768))
  2123  0546  00B2               	movwf	printf@f+1
  2124  0547  0849               	movf	save_tuning@value+1,w
  2125  0548  00B4               	movwf	?_printf+3
  2126  0549  0848               	movf	save_tuning@value,w
  2127  054A  00B3               	movwf	?_printf+2
  2128  054B  118A  2269  118A   	fcall	_printf
  2129                           
  2130                           ;main.c: 188: write16_eeprom(current_key*2, value);
  2131  054E  1283               	bcf	3,5	;RP0=0, select bank0
  2132  054F  1303               	bcf	3,6	;RP1=0, select bank0
  2133  0550  0849               	movf	save_tuning@value+1,w
  2134  0551  00C1               	movwf	write16_eeprom@value+1
  2135  0552  0848               	movf	save_tuning@value,w
  2136  0553  00C0               	movwf	write16_eeprom@value
  2137  0554  0879               	movf	_current_key,w
  2138  0555  00C6               	movwf	??_save_tuning
  2139  0556  0746               	addwf	??_save_tuning,w
  2140  0557  118A  25E6  118A   	fcall	_write16_eeprom
  2141                           
  2142                           ;main.c: 189: printf("Done!\n\r");
  2143  055A  305F               	movlw	low (STR_6| (0+32768))
  2144  055B  1283               	bcf	3,5	;RP0=0, select bank0
  2145  055C  1303               	bcf	3,6	;RP1=0, select bank0
  2146  055D  00B1               	movwf	printf@f
  2147  055E  3082               	movlw	high (STR_6| (0+32768))
  2148  055F  00B2               	movwf	printf@f+1
  2149  0560  118A  2269  118A   	fcall	_printf
  2150  0563  3001               	movlw	1
  2151  0564  1283               	bcf	3,5	;RP0=0, select bank0
  2152  0565  1303               	bcf	3,6	;RP1=0, select bank0
  2153  0566  00C6               	movwf	??_save_tuning
  2154  0567  0846               	movf	??_save_tuning,w
  2155  0568  07F9               	addwf	_current_key,f
  2156  0569  2D29               	goto	l1776
  2157  056A                     __end_of_save_tuning:	
  2158                           
  2159                           	psect	text8
  2160  05E6                     __ptext8:	
  2161 ;; *************** function _write16_eeprom *****************
  2162 ;; Defined at:
  2163 ;;		line 71 in file "main.c"
  2164 ;; Parameters:    Size  Location     Type
  2165 ;;  addr            1    wreg     unsigned char 
  2166 ;;  value           2   32[BANK0 ] unsigned int 
  2167 ;; Auto vars:     Size  Location     Type
  2168 ;;  addr            1   37[BANK0 ] unsigned char 
  2169 ;;  hi_byte         1   36[BANK0 ] unsigned char 
  2170 ;;  lo_byte         1   35[BANK0 ] unsigned char 
  2171 ;; Return value:  Size  Location     Type
  2172 ;;		None               void
  2173 ;; Registers used:
  2174 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2175 ;; Tracked objects:
  2176 ;;		On entry : 0/0
  2177 ;;		On exit  : 0/0
  2178 ;;		Unchanged: 0/0
  2179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2180 ;;      Params:         0       2       0       0
  2181 ;;      Locals:         0       3       0       0
  2182 ;;      Temps:          0       1       0       0
  2183 ;;      Totals:         0       6       0       0
  2184 ;;Total ram usage:        6 bytes
  2185 ;; Hardware stack levels used:    1
  2186 ;; Hardware stack levels required when called:    3
  2187 ;; This function calls:
  2188 ;;		_eeprom_write
  2189 ;;		_printf
  2190 ;; This function is called by:
  2191 ;;		_save_tuning
  2192 ;; This function uses a non-reentrant model
  2193 ;;
  2194                           
  2195                           
  2196                           ;psect for function _write16_eeprom
  2197  05E6                     _write16_eeprom:	
  2198                           
  2199                           ;incstack = 0
  2200                           ; Regs used in _write16_eeprom: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2201                           ;write16_eeprom@addr stored from wreg
  2202  05E6  1283               	bcf	3,5	;RP0=0, select bank0
  2203  05E7  1303               	bcf	3,6	;RP1=0, select bank0
  2204  05E8  00C5               	movwf	write16_eeprom@addr
  2205                           
  2206                           ;main.c: 72: uint8_t lo_byte = value & 0xFF;
  2207  05E9  0840               	movf	write16_eeprom@value,w
  2208  05EA  00C2               	movwf	??_write16_eeprom
  2209  05EB  0842               	movf	??_write16_eeprom,w
  2210  05EC  00C3               	movwf	write16_eeprom@lo_byte
  2211                           
  2212                           ;main.c: 73: uint8_t hi_byte = value >> 8;
  2213  05ED  0841               	movf	write16_eeprom@value+1,w
  2214  05EE  00C2               	movwf	??_write16_eeprom
  2215  05EF  0842               	movf	??_write16_eeprom,w
  2216  05F0  00C4               	movwf	write16_eeprom@hi_byte
  2217                           
  2218                           ;main.c: 76: eeprom_write(addr, lo_byte);
  2219  05F1  0843               	movf	write16_eeprom@lo_byte,w
  2220  05F2  00C2               	movwf	??_write16_eeprom
  2221  05F3  0842               	movf	??_write16_eeprom,w
  2222  05F4  00F4               	movwf	eeprom_write@value
  2223  05F5  0845               	movf	write16_eeprom@addr,w
  2224  05F6  118A  272D  118A   	fcall	_eeprom_write
  2225                           
  2226                           ;main.c: 77: while(WR){
  2227  05F9  2E03               	goto	l1756
  2228  05FA                     l1754:	
  2229                           
  2230                           ;main.c: 78: printf(".");
  2231  05FA  3067               	movlw	low (STR_1| (0+32768))
  2232  05FB  1283               	bcf	3,5	;RP0=0, select bank0
  2233  05FC  1303               	bcf	3,6	;RP1=0, select bank0
  2234  05FD  00B1               	movwf	printf@f
  2235  05FE  3082               	movlw	high (STR_1| (0+32768))
  2236  05FF  00B2               	movwf	printf@f+1
  2237  0600  118A  2269  118A   	fcall	_printf
  2238  0603                     l1756:	
  2239  0603  1683               	bsf	3,5	;RP0=1, select bank3
  2240  0604  1703               	bsf	3,6	;RP1=1, select bank3
  2241  0605  188C               	btfsc	12,1	;volsfr
  2242  0606  2DFA               	goto	l1754
  2243                           
  2244                           ;main.c: 79: }
  2245                           ;main.c: 80: eeprom_write(addr+1, hi_byte);
  2246  0607  1283               	bcf	3,5	;RP0=0, select bank0
  2247  0608  1303               	bcf	3,6	;RP1=0, select bank0
  2248  0609  0844               	movf	write16_eeprom@hi_byte,w
  2249  060A  00C2               	movwf	??_write16_eeprom
  2250  060B  0842               	movf	??_write16_eeprom,w
  2251  060C  00F4               	movwf	eeprom_write@value
  2252  060D  0845               	movf	write16_eeprom@addr,w
  2253  060E  3E01               	addlw	1
  2254  060F  118A  272D  118A   	fcall	_eeprom_write
  2255                           
  2256                           ;main.c: 81: while(WR){
  2257  0612  2E1C               	goto	l1762
  2258  0613                     l1760:	
  2259                           
  2260                           ;main.c: 82: printf(".");
  2261  0613  3067               	movlw	low (STR_1| (0+32768))
  2262  0614  1283               	bcf	3,5	;RP0=0, select bank0
  2263  0615  1303               	bcf	3,6	;RP1=0, select bank0
  2264  0616  00B1               	movwf	printf@f
  2265  0617  3082               	movlw	high (STR_1| (0+32768))
  2266  0618  00B2               	movwf	printf@f+1
  2267  0619  118A  2269  118A   	fcall	_printf
  2268  061C                     l1762:	
  2269  061C  1683               	bsf	3,5	;RP0=1, select bank3
  2270  061D  1703               	bsf	3,6	;RP1=1, select bank3
  2271  061E  188C               	btfsc	12,1	;volsfr
  2272  061F  2E13               	goto	l1760
  2273  0620  0008               	return
  2274  0621                     __end_of_write16_eeprom:	
  2275                           
  2276                           	psect	text9
  2277  072D                     __ptext9:	
  2278 ;; *************** function _eeprom_write *****************
  2279 ;; Defined at:
  2280 ;;		line 6 in file "/Applications/microchip/xc8/v1.34/sources/pic/eewrite.c"
  2281 ;; Parameters:    Size  Location     Type
  2282 ;;  addr            1    wreg     unsigned char 
  2283 ;;  value           1    4[COMMON] unsigned char 
  2284 ;; Auto vars:     Size  Location     Type
  2285 ;;  addr            1    6[COMMON] unsigned char 
  2286 ;; Return value:  Size  Location     Type
  2287 ;;		None               void
  2288 ;; Registers used:
  2289 ;;		wreg, status,2, status,0
  2290 ;; Tracked objects:
  2291 ;;		On entry : 0/0
  2292 ;;		On exit  : 0/0
  2293 ;;		Unchanged: 0/0
  2294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2295 ;;      Params:         1       0       0       0
  2296 ;;      Locals:         1       0       0       0
  2297 ;;      Temps:          1       0       0       0
  2298 ;;      Totals:         3       0       0       0
  2299 ;;Total ram usage:        3 bytes
  2300 ;; Hardware stack levels used:    1
  2301 ;; Hardware stack levels required when called:    1
  2302 ;; This function calls:
  2303 ;;		Nothing
  2304 ;; This function is called by:
  2305 ;;		_write16_eeprom
  2306 ;; This function uses a non-reentrant model
  2307 ;;
  2308                           
  2309                           
  2310                           ;psect for function _eeprom_write
  2311  072D                     _eeprom_write:	
  2312                           
  2313                           ;incstack = 0
  2314                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  2315                           ;eeprom_write@addr stored from wreg
  2316  072D  00F6               	movwf	eeprom_write@addr
  2317  072E                     l292:	
  2318  072E  1683               	bsf	3,5	;RP0=1, select bank3
  2319  072F  1703               	bsf	3,6	;RP1=1, select bank3
  2320  0730  188C               	btfsc	12,1	;volsfr
  2321  0731  2F2E               	goto	l292
  2322  0732  0876               	movf	eeprom_write@addr,w
  2323  0733  1283               	bcf	3,5	;RP0=0, select bank2
  2324  0734  1703               	bsf	3,6	;RP1=1, select bank2
  2325  0735  008D               	movwf	13	;volatile
  2326  0736  0874               	movf	eeprom_write@value,w
  2327  0737  008C               	movwf	12	;volatile
  2328  0738  303F               	movlw	63
  2329  0739  00F5               	movwf	??_eeprom_write
  2330  073A  0875               	movf	??_eeprom_write,w
  2331  073B  1683               	bsf	3,5	;RP0=1, select bank3
  2332  073C  1703               	bsf	3,6	;RP1=1, select bank3
  2333  073D  058C               	andwf	12,f	;volsfr
  2334  073E  1283               	bcf	3,5	;RP0=0, select bank0
  2335  073F  1303               	bcf	3,6	;RP1=0, select bank0
  2336  0740  1003               	bcf	3,0	;volatile
  2337  0741  1B8B               	btfsc	11,7	;volatile
  2338  0742  1403               	bsf	3,0	;volatile
  2339  0743  138B               	bcf	11,7	;volatile
  2340  0744  1683               	bsf	3,5	;RP0=1, select bank3
  2341  0745  1703               	bsf	3,6	;RP1=1, select bank3
  2342  0746  150C               	bsf	12,2	;volsfr
  2343  0747  3055               	movlw	85
  2344  0748  008D               	movwf	13	;volsfr
  2345  0749  30AA               	movlw	170
  2346  074A  008D               	movwf	13	;volsfr
  2347  074B  148C               	bsf	12,1	;volsfr
  2348  074C  110C               	bcf	12,2	;volsfr
  2349  074D  1283               	bcf	3,5	;RP0=0, select bank0
  2350  074E  1303               	bcf	3,6	;RP1=0, select bank0
  2351  074F  1C03               	btfss	3,0	;volatile
  2352  0750  0008               	return
  2353  0751  178B               	bsf	11,7	;volatile
  2354  0752  0008               	return
  2355  0753                     __end_of_eeprom_write:	
  2356                           
  2357                           	psect	text10
  2358  079B                     __ptext10:	
  2359 ;; *************** function ___wmul *****************
  2360 ;; Defined at:
  2361 ;;		line 15 in file "/Applications/microchip/xc8/v1.34/sources/common/Umul16.c"
  2362 ;; Parameters:    Size  Location     Type
  2363 ;;  multiplier      2    0[BANK0 ] unsigned int 
  2364 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  2365 ;; Auto vars:     Size  Location     Type
  2366 ;;  product         2    4[COMMON] unsigned int 
  2367 ;; Return value:  Size  Location     Type
  2368 ;;                  2    0[BANK0 ] unsigned int 
  2369 ;; Registers used:
  2370 ;;		wreg, status,2, status,0
  2371 ;; Tracked objects:
  2372 ;;		On entry : 0/0
  2373 ;;		On exit  : 0/0
  2374 ;;		Unchanged: 0/0
  2375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2376 ;;      Params:         0       4       0       0
  2377 ;;      Locals:         2       0       0       0
  2378 ;;      Temps:          0       0       0       0
  2379 ;;      Totals:         2       4       0       0
  2380 ;;Total ram usage:        6 bytes
  2381 ;; Hardware stack levels used:    1
  2382 ;; Hardware stack levels required when called:    1
  2383 ;; This function calls:
  2384 ;;		Nothing
  2385 ;; This function is called by:
  2386 ;;		_resetTuning
  2387 ;; This function uses a non-reentrant model
  2388 ;;
  2389                           
  2390                           
  2391                           ;psect for function ___wmul
  2392  079B                     ___wmul:	
  2393                           
  2394                           ;incstack = 0
  2395                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2396  079B  01F4               	clrf	___wmul@product
  2397  079C  01F5               	clrf	___wmul@product+1
  2398  079D                     l1802:	
  2399  079D  1283               	bcf	3,5	;RP0=0, select bank0
  2400  079E  1303               	bcf	3,6	;RP1=0, select bank0
  2401  079F  1C20               	btfss	___wmul@multiplier,0
  2402  07A0  2FA7               	goto	l382
  2403  07A1  0822               	movf	___wmul@multiplicand,w
  2404  07A2  07F4               	addwf	___wmul@product,f
  2405  07A3  1803               	skipnc
  2406  07A4  0AF5               	incf	___wmul@product+1,f
  2407  07A5  0823               	movf	___wmul@multiplicand+1,w
  2408  07A6  07F5               	addwf	___wmul@product+1,f
  2409  07A7                     l382:	
  2410  07A7  3001               	movlw	1
  2411  07A8                     u1535:	
  2412  07A8  1003               	clrc
  2413  07A9  0DA2               	rlf	___wmul@multiplicand,f
  2414  07AA  0DA3               	rlf	___wmul@multiplicand+1,f
  2415  07AB  3EFF               	addlw	-1
  2416  07AC  1D03               	skipz
  2417  07AD  2FA8               	goto	u1535
  2418  07AE  3001               	movlw	1
  2419  07AF                     u1545:	
  2420  07AF  1003               	clrc
  2421  07B0  0CA1               	rrf	___wmul@multiplier+1,f
  2422  07B1  0CA0               	rrf	___wmul@multiplier,f
  2423  07B2  3EFF               	addlw	-1
  2424  07B3  1D03               	skipz
  2425  07B4  2FAF               	goto	u1545
  2426  07B5  0820               	movf	___wmul@multiplier,w
  2427  07B6  0421               	iorwf	___wmul@multiplier+1,w
  2428  07B7  1D03               	btfss	3,2
  2429  07B8  2F9D               	goto	l1802
  2430  07B9  0875               	movf	___wmul@product+1,w
  2431  07BA  00A1               	movwf	?___wmul+1
  2432  07BB  0874               	movf	___wmul@product,w
  2433  07BC  00A0               	movwf	?___wmul
  2434  07BD  0008               	return
  2435  07BE                     __end_of___wmul:	
  2436                           
  2437                           	psect	text11
  2438  0044                     __ptext11:	
  2439 ;; *************** function _move_up *****************
  2440 ;; Defined at:
  2441 ;;		line 204 in file "main.c"
  2442 ;; Parameters:    Size  Location     Type
  2443 ;;		None
  2444 ;; Auto vars:     Size  Location     Type
  2445 ;;		None
  2446 ;; Return value:  Size  Location     Type
  2447 ;;		None               void
  2448 ;; Registers used:
  2449 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2450 ;; Tracked objects:
  2451 ;;		On entry : 0/0
  2452 ;;		On exit  : 0/0
  2453 ;;		Unchanged: 0/0
  2454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2455 ;;      Params:         0       0       0       0
  2456 ;;      Locals:         0       0       0       0
  2457 ;;      Temps:          0       1       0       0
  2458 ;;      Totals:         0       1       0       0
  2459 ;;Total ram usage:        1 bytes
  2460 ;; Hardware stack levels used:    1
  2461 ;; Hardware stack levels required when called:    4
  2462 ;; This function calls:
  2463 ;;		_check_key_range
  2464 ;; This function is called by:
  2465 ;;		_tune
  2466 ;; This function uses a non-reentrant model
  2467 ;;
  2468                           
  2469                           
  2470                           ;psect for function _move_up
  2471  0044                     _move_up:	
  2472                           
  2473                           ;main.c: 205: currently_tuning += 1;
  2474                           
  2475                           ;incstack = 0
  2476                           ; Regs used in _move_up: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2477  0044  3001               	movlw	1
  2478  0045  1283               	bcf	3,5	;RP0=0, select bank0
  2479  0046  1303               	bcf	3,6	;RP1=0, select bank0
  2480  0047  00C4               	movwf	??_move_up
  2481  0048  0844               	movf	??_move_up,w
  2482  0049  07D7               	addwf	_currently_tuning,f
  2483                           
  2484                           ;main.c: 206: check_key_range();
  2485  004A  118A  2684         	fcall	_check_key_range
  2486  004C  0008               	return
  2487  004D                     __end_of_move_up:	
  2488                           
  2489                           	psect	text12
  2490  004D                     __ptext12:	
  2491 ;; *************** function _move_down *****************
  2492 ;; Defined at:
  2493 ;;		line 200 in file "main.c"
  2494 ;; Parameters:    Size  Location     Type
  2495 ;;		None
  2496 ;; Auto vars:     Size  Location     Type
  2497 ;;		None
  2498 ;; Return value:  Size  Location     Type
  2499 ;;		None               void
  2500 ;; Registers used:
  2501 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2502 ;; Tracked objects:
  2503 ;;		On entry : 0/0
  2504 ;;		On exit  : 0/0
  2505 ;;		Unchanged: 0/0
  2506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2507 ;;      Params:         0       0       0       0
  2508 ;;      Locals:         0       0       0       0
  2509 ;;      Temps:          0       1       0       0
  2510 ;;      Totals:         0       1       0       0
  2511 ;;Total ram usage:        1 bytes
  2512 ;; Hardware stack levels used:    1
  2513 ;; Hardware stack levels required when called:    4
  2514 ;; This function calls:
  2515 ;;		_check_key_range
  2516 ;; This function is called by:
  2517 ;;		_tune
  2518 ;; This function uses a non-reentrant model
  2519 ;;
  2520                           
  2521                           
  2522                           ;psect for function _move_down
  2523  004D                     _move_down:	
  2524                           
  2525                           ;main.c: 201: currently_tuning -= 1;
  2526                           
  2527                           ;incstack = 0
  2528                           ; Regs used in _move_down: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2529  004D  30FF               	movlw	255
  2530  004E  1283               	bcf	3,5	;RP0=0, select bank0
  2531  004F  1303               	bcf	3,6	;RP1=0, select bank0
  2532  0050  00C4               	movwf	??_move_down
  2533  0051  0844               	movf	??_move_down,w
  2534  0052  07D7               	addwf	_currently_tuning,f
  2535                           
  2536                           ;main.c: 202: check_key_range();
  2537  0053  118A  2684         	fcall	_check_key_range
  2538  0055  0008               	return
  2539  0056                     __end_of_move_down:	
  2540                           
  2541                           	psect	text13
  2542  0684                     __ptext13:	
  2543 ;; *************** function _check_key_range *****************
  2544 ;; Defined at:
  2545 ;;		line 192 in file "main.c"
  2546 ;; Parameters:    Size  Location     Type
  2547 ;;		None
  2548 ;; Auto vars:     Size  Location     Type
  2549 ;;		None
  2550 ;; Return value:  Size  Location     Type
  2551 ;;		None               void
  2552 ;; Registers used:
  2553 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2554 ;; Tracked objects:
  2555 ;;		On entry : 0/0
  2556 ;;		On exit  : 0/0
  2557 ;;		Unchanged: 0/0
  2558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2559 ;;      Params:         0       0       0       0
  2560 ;;      Locals:         0       0       0       0
  2561 ;;      Temps:          0       4       0       0
  2562 ;;      Totals:         0       4       0       0
  2563 ;;Total ram usage:        4 bytes
  2564 ;; Hardware stack levels used:    1
  2565 ;; Hardware stack levels required when called:    3
  2566 ;; This function calls:
  2567 ;;		_printf
  2568 ;; This function is called by:
  2569 ;;		_move_down
  2570 ;;		_move_up
  2571 ;; This function uses a non-reentrant model
  2572 ;;
  2573                           
  2574                           
  2575                           ;psect for function _check_key_range
  2576  0684                     _check_key_range:	
  2577                           
  2578                           ;main.c: 193: if (currently_tuning < 0) {
  2579                           
  2580                           ;incstack = 0
  2581                           ; Regs used in _check_key_range: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2582  0684  1283               	bcf	3,5	;RP0=0, select bank0
  2583  0685  1303               	bcf	3,6	;RP1=0, select bank0
  2584  0686  1FD7               	btfss	_currently_tuning,7
  2585  0687  2E8A               	goto	l1782
  2586                           
  2587                           ;main.c: 194: currently_tuning = 0;
  2588  0688  01D7               	clrf	_currently_tuning
  2589                           
  2590                           ;main.c: 195: } else if (currently_tuning > key_count-1) {
  2591  0689  2EA4               	goto	l1786
  2592  068A                     l1782:	
  2593  068A  0857               	movf	_currently_tuning,w
  2594  068B  00C0               	movwf	??_check_key_range
  2595  068C  01C1               	clrf	??_check_key_range+1
  2596  068D  1BC0               	btfsc	??_check_key_range,7
  2597  068E  03C1               	decf	??_check_key_range+1,f
  2598  068F  0877               	movf	_key_count,w
  2599  0690  3EFF               	addlw	255
  2600  0691  00C2               	movwf	??_check_key_range+2
  2601  0692  0878               	movf	_key_count+1,w
  2602  0693  1803               	skipnc
  2603  0694  3E01               	addlw	1
  2604  0695  3EFF               	addlw	255
  2605  0696  00C3               	movwf	??_check_key_range+3
  2606  0697  0841               	movf	??_check_key_range+1,w
  2607  0698  0243               	subwf	??_check_key_range+3,w
  2608  0699  1D03               	skipz
  2609  069A  2E9D               	goto	u1495
  2610  069B  0840               	movf	??_check_key_range,w
  2611  069C  0242               	subwf	??_check_key_range+2,w
  2612  069D                     u1495:	
  2613  069D  1803               	skipnc
  2614  069E  2EA4               	goto	l1786
  2615                           
  2616                           ;main.c: 196: currently_tuning = key_count-1;
  2617  069F  0877               	movf	_key_count,w
  2618  06A0  3EFF               	addlw	-1
  2619  06A1  00C0               	movwf	??_check_key_range
  2620  06A2  0840               	movf	??_check_key_range,w
  2621  06A3  00D7               	movwf	_currently_tuning
  2622  06A4                     l1786:	
  2623                           
  2624                           ;main.c: 197: }
  2625                           ;main.c: 198: printf("Current key: %i\n\r", currently_tuning);
  2626  06A4  303B               	movlw	low (STR_7| (0+32768))
  2627  06A5  00B1               	movwf	printf@f
  2628  06A6  3082               	movlw	high (STR_7| (0+32768))
  2629  06A7  00B2               	movwf	printf@f+1
  2630  06A8  0857               	movf	_currently_tuning,w
  2631  06A9  00B3               	movwf	?_printf+2
  2632  06AA  01B4               	clrf	?_printf+3
  2633  06AB  1BB3               	btfsc	?_printf+2,7
  2634  06AC  03B4               	decf	?_printf+3,f
  2635  06AD  118A  2269         	fcall	_printf
  2636  06AF  0008               	return
  2637  06B0                     __end_of_check_key_range:	
  2638                           
  2639                           	psect	text14
  2640  0269                     __ptext14:	
  2641 ;; *************** function _printf *****************
  2642 ;; Defined at:
  2643 ;;		line 464 in file "/Applications/microchip/xc8/v1.34/sources/common/doprnt.c"
  2644 ;; Parameters:    Size  Location     Type
  2645 ;;  f               2   17[BANK0 ] PTR const unsigned char 
  2646 ;;		 -> STR_12(40), STR_11(60), STR_10(58), STR_9(42), 
  2647 ;;		 -> STR_8(37), STR_7(18), STR_6(8), STR_5(18), 
  2648 ;;		 -> STR_4(22), STR_3(28), STR_2(2), STR_1(2), 
  2649 ;; Auto vars:     Size  Location     Type
  2650 ;;  tmpval          4    0        struct .
  2651 ;;  val             2   29[BANK0 ] unsigned int 
  2652 ;;  cp              2    0        PTR const unsigned char 
  2653 ;;  len             2    0        unsigned int 
  2654 ;;  c               1   31[BANK0 ] char 
  2655 ;;  prec            1   28[BANK0 ] char 
  2656 ;;  flag            1   27[BANK0 ] unsigned char 
  2657 ;;  ap              1   26[BANK0 ] PTR void [1]
  2658 ;;		 -> ?_printf(2), 
  2659 ;; Return value:  Size  Location     Type
  2660 ;;                  2   17[BANK0 ] int 
  2661 ;; Registers used:
  2662 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2663 ;; Tracked objects:
  2664 ;;		On entry : 0/0
  2665 ;;		On exit  : 0/0
  2666 ;;		Unchanged: 0/0
  2667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2668 ;;      Params:         0       6       0       0
  2669 ;;      Locals:         0       6       0       0
  2670 ;;      Temps:          0       3       0       0
  2671 ;;      Totals:         0      15       0       0
  2672 ;;Total ram usage:       15 bytes
  2673 ;; Hardware stack levels used:    1
  2674 ;; Hardware stack levels required when called:    2
  2675 ;; This function calls:
  2676 ;;		___lwdiv
  2677 ;;		___lwmod
  2678 ;;		_putch
  2679 ;; This function is called by:
  2680 ;;		_write16_eeprom
  2681 ;;		_tuningCheck
  2682 ;;		_save_tuning
  2683 ;;		_check_key_range
  2684 ;;		_check_value_range
  2685 ;;		_resetTuning
  2686 ;;		_main
  2687 ;;		_print_tuning
  2688 ;; This function uses a non-reentrant model
  2689 ;;
  2690                           
  2691                           
  2692                           ;psect for function _printf
  2693  0269                     _printf:	
  2694                           
  2695                           ;doprnt.c: 466: va_list ap;
  2696                           ;doprnt.c: 499: signed char c;
  2697                           ;doprnt.c: 506: signed char prec;
  2698                           ;doprnt.c: 508: unsigned char flag;
  2699                           ;doprnt.c: 523: union {
  2700                           ;doprnt.c: 524: unsigned long vd;
  2701                           ;doprnt.c: 525: double integ;
  2702                           ;doprnt.c: 526: } tmpval;
  2703                           ;doprnt.c: 528: unsigned int val;
  2704                           ;doprnt.c: 529: unsigned len;
  2705                           ;doprnt.c: 530: const char * cp;
  2706                           ;doprnt.c: 533: *ap = __va_start();
  2707                           
  2708                           ;incstack = 0
  2709                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2710  0269  3033               	movlw	(low ((?_printf| 0+2)))& (0+255)
  2711  026A  1283               	bcf	3,5	;RP0=0, select bank0
  2712  026B  1303               	bcf	3,6	;RP1=0, select bank0
  2713  026C  00B7               	movwf	??_printf
  2714  026D  0837               	movf	??_printf,w
  2715  026E  00BA               	movwf	printf@ap
  2716  026F                     l1746:	
  2717                           ;doprnt.c: 536: while(c = *f++) {
  2718                           
  2719  026F  1283               	bcf	3,5	;RP0=0, select bank0
  2720  0270  1303               	bcf	3,6	;RP1=0, select bank0
  2721  0271  0832               	movf	printf@f+1,w
  2722  0272  00B8               	movwf	??_printf+1
  2723  0273  0831               	movf	printf@f,w
  2724  0274  00B7               	movwf	??_printf
  2725  0275  0AB1               	incf	printf@f,f
  2726  0276  1903               	skipnz
  2727  0277  0AB2               	incf	printf@f+1,f
  2728  0278  0838               	movf	??_printf+1,w
  2729  0279  00FF               	movwf	127
  2730  027A  0837               	movf	??_printf,w
  2731  027B  0084               	movwf	4
  2732  027C  118A  2100  118A   	fcall	stringtab
  2733  027F  00B9               	movwf	??_printf+2
  2734  0280  0839               	movf	??_printf+2,w
  2735  0281  00BF               	movwf	printf@c
  2736  0282  083F               	movf	printf@c,w
  2737  0283  1903               	btfsc	3,2
  2738  0284  0008               	return
  2739                           
  2740                           ;doprnt.c: 538: if(c != '%')
  2741  0285  3025               	movlw	37
  2742  0286  063F               	xorwf	printf@c,w
  2743  0287  1903               	btfsc	3,2
  2744  0288  2A8E               	goto	l1706
  2745                           
  2746                           ;doprnt.c: 540: {
  2747                           ;doprnt.c: 541: (putch(c) );
  2748  0289  083F               	movf	printf@c,w
  2749  028A  118A  205E  118A   	fcall	_putch
  2750                           
  2751                           ;doprnt.c: 542: continue;
  2752  028D  2A6F               	goto	l1746
  2753  028E                     l1706:	
  2754                           
  2755                           ;doprnt.c: 543: }
  2756                           ;doprnt.c: 548: flag = 0;
  2757  028E  1283               	bcf	3,5	;RP0=0, select bank0
  2758  028F  1303               	bcf	3,6	;RP1=0, select bank0
  2759  0290  01BB               	clrf	printf@flag
  2760                           
  2761                           ;doprnt.c: 822: }
  2762                           
  2763                           ;doprnt.c: 813: continue;
  2764                           
  2765                           ;doprnt.c: 802: default:
  2766                           
  2767                           ;doprnt.c: 698: case 'i':
  2768                           ;doprnt.c: 699: break;
  2769                           
  2770                           ;doprnt.c: 697: case 'd':
  2771                           
  2772                           ;doprnt.c: 638: goto alldone;
  2773                           
  2774                           ;doprnt.c: 637: case 0:
  2775                           
  2776                           ;doprnt.c: 635: switch(c = *f++) {
  2777  0291  0832               	movf	printf@f+1,w
  2778  0292  00B8               	movwf	??_printf+1
  2779  0293  0831               	movf	printf@f,w
  2780  0294  00B7               	movwf	??_printf
  2781  0295  0AB1               	incf	printf@f,f
  2782  0296  1903               	skipnz
  2783  0297  0AB2               	incf	printf@f+1,f
  2784  0298  0838               	movf	??_printf+1,w
  2785  0299  00FF               	movwf	127
  2786  029A  0837               	movf	??_printf,w
  2787  029B  0084               	movwf	4
  2788  029C  118A  2100  118A   	fcall	stringtab
  2789  029F  00BF               	movwf	printf@c
  2790                           
  2791                           ; Switch size 1, requested type "space"
  2792                           ; Number of cases is 3, Range of values is 0 to 105
  2793                           ; switch strategies available:
  2794                           ; Name         Instructions Cycles
  2795                           ; simple_byte           10     6 (average)
  2796                           ; direct_byte          219     7 (fixed)
  2797                           ; jumptable            260     6 (fixed)
  2798                           ;	Chosen strategy is simple_byte
  2799  02A0  3A00               	xorlw	0	; case 0
  2800  02A1  1903               	skipnz
  2801  02A2  2B30               	goto	l257
  2802  02A3  3A64               	xorlw	100	; case 100
  2803  02A4  1903               	skipnz
  2804  02A5  2AAA               	goto	l1712
  2805  02A6  3A0D               	xorlw	13	; case 105
  2806  02A7  1903               	skipnz
  2807  02A8  2AAA               	goto	l1712
  2808  02A9  2A6F               	goto	l1746
  2809  02AA                     l1712:	
  2810                           
  2811                           ;doprnt.c: 1253: {
  2812                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2813  02AA  083A               	movf	printf@ap,w
  2814  02AB  0084               	movwf	4
  2815  02AC  1383               	bcf	3,7	;select IRP bank0
  2816  02AD  0800               	movf	0,w
  2817  02AE  00BD               	movwf	printf@val
  2818  02AF  0A84               	incf	4,f
  2819  02B0  0800               	movf	0,w
  2820  02B1  00BE               	movwf	printf@val+1
  2821  02B2  3002               	movlw	2
  2822  02B3  00B7               	movwf	??_printf
  2823  02B4  0837               	movf	??_printf,w
  2824  02B5  07BA               	addwf	printf@ap,f
  2825                           
  2826                           ;doprnt.c: 1261: if((int)val < 0) {
  2827  02B6  1FBE               	btfss	printf@val+1,7
  2828  02B7  2AC1               	goto	l1722
  2829                           
  2830                           ;doprnt.c: 1262: flag |= 0x03;
  2831  02B8  3003               	movlw	3
  2832  02B9  00B7               	movwf	??_printf
  2833  02BA  0837               	movf	??_printf,w
  2834  02BB  04BB               	iorwf	printf@flag,f
  2835                           
  2836                           ;doprnt.c: 1263: val = -val;
  2837  02BC  09BD               	comf	printf@val,f
  2838  02BD  09BE               	comf	printf@val+1,f
  2839  02BE  0ABD               	incf	printf@val,f
  2840  02BF  1903               	skipnz
  2841  02C0  0ABE               	incf	printf@val+1,f
  2842  02C1                     l1722:	
  2843                           
  2844                           ;doprnt.c: 1264: }
  2845                           ;doprnt.c: 1266: }
  2846                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2847  02C1  01BF               	clrf	printf@c
  2848  02C2  0ABF               	incf	printf@c,f
  2849  02C3  3005               	movlw	5
  2850  02C4  063F               	xorwf	printf@c,w
  2851  02C5  1903               	btfsc	3,2
  2852  02C6  2AE8               	goto	l1734
  2853  02C7                     l1728:	
  2854                           
  2855                           ;doprnt.c: 1306: if(val < dpowers[c])
  2856  02C7  083F               	movf	printf@c,w
  2857  02C8  00B7               	movwf	??_printf
  2858  02C9  0737               	addwf	??_printf,w
  2859  02CA  3E12               	addlw	low (_dpowers| (0+32768))
  2860  02CB  0084               	movwf	4
  2861  02CC  3081               	movlw	high (_dpowers| (0+32768))
  2862  02CD  1803               	skipnc
  2863  02CE  3E01               	addlw	1
  2864  02CF  00FF               	movwf	127
  2865  02D0  118A  2100  118A   	fcall	stringtab
  2866  02D3  00B8               	movwf	??_printf+1
  2867  02D4  118A  2100  118A   	fcall	stringtab
  2868  02D7  00B9               	movwf	??_printf+2
  2869  02D8  0839               	movf	??_printf+2,w
  2870  02D9  023E               	subwf	printf@val+1,w
  2871  02DA  1D03               	skipz
  2872  02DB  2ADE               	goto	u1405
  2873  02DC  0838               	movf	??_printf+1,w
  2874  02DD  023D               	subwf	printf@val,w
  2875  02DE                     u1405:	
  2876  02DE  1C03               	btfss	3,0
  2877  02DF  2AE8               	goto	l1734
  2878                           
  2879                           ;doprnt.c: 1307: break;
  2880  02E0  3001               	movlw	1
  2881  02E1  00B7               	movwf	??_printf
  2882  02E2  0837               	movf	??_printf,w
  2883  02E3  07BF               	addwf	printf@c,f
  2884  02E4  3005               	movlw	5
  2885  02E5  063F               	xorwf	printf@c,w
  2886  02E6  1D03               	btfss	3,2
  2887  02E7  2AC7               	goto	l1728
  2888  02E8                     l1734:	
  2889                           
  2890                           ;doprnt.c: 1422: {
  2891                           ;doprnt.c: 1438: if(flag & 0x03)
  2892  02E8  083B               	movf	printf@flag,w
  2893  02E9  3903               	andlw	3
  2894  02EA  1903               	btfsc	3,2
  2895  02EB  2AF0               	goto	l1738
  2896                           
  2897                           ;doprnt.c: 1439: (putch('-') );
  2898  02EC  302D               	movlw	45
  2899  02ED  118A  205E  118A   	fcall	_putch
  2900  02F0                     l1738:	
  2901                           
  2902                           ;doprnt.c: 1469: }
  2903                           ;doprnt.c: 1472: prec = c;
  2904  02F0  1283               	bcf	3,5	;RP0=0, select bank0
  2905  02F1  1303               	bcf	3,6	;RP1=0, select bank0
  2906  02F2  083F               	movf	printf@c,w
  2907  02F3  00B7               	movwf	??_printf
  2908  02F4  0837               	movf	??_printf,w
  2909  02F5  00BC               	movwf	printf@prec
  2910  02F6                     l1744:	
  2911                           ;doprnt.c: 1474: while(prec--) {
  2912                           
  2913  02F6  30FF               	movlw	255
  2914  02F7  1283               	bcf	3,5	;RP0=0, select bank0
  2915  02F8  1303               	bcf	3,6	;RP1=0, select bank0
  2916  02F9  00B7               	movwf	??_printf
  2917  02FA  0837               	movf	??_printf,w
  2918  02FB  07BC               	addwf	printf@prec,f
  2919  02FC  0A3C               	incf	printf@prec,w
  2920  02FD  1903               	btfsc	3,2
  2921  02FE  2A6F               	goto	l1746
  2922                           
  2923                           ;doprnt.c: 1478: {
  2924                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2925  02FF  300A               	movlw	10
  2926  0300  00AB               	movwf	___lwmod@divisor
  2927  0301  3000               	movlw	0
  2928  0302  00AC               	movwf	___lwmod@divisor+1
  2929  0303  083C               	movf	printf@prec,w
  2930  0304  00B7               	movwf	??_printf
  2931  0305  0737               	addwf	??_printf,w
  2932  0306  3E12               	addlw	low (_dpowers| (0+32768))
  2933  0307  0084               	movwf	4
  2934  0308  3081               	movlw	high (_dpowers| (0+32768))
  2935  0309  1803               	skipnc
  2936  030A  3E01               	addlw	1
  2937  030B  00FF               	movwf	127
  2938  030C  118A  2100  118A   	fcall	stringtab
  2939  030F  00A4               	movwf	___lwdiv@divisor
  2940  0310  118A  2100  118A   	fcall	stringtab
  2941  0313  00A5               	movwf	___lwdiv@divisor+1
  2942  0314  083E               	movf	printf@val+1,w
  2943  0315  00A7               	movwf	___lwdiv@dividend+1
  2944  0316  083D               	movf	printf@val,w
  2945  0317  00A6               	movwf	___lwdiv@dividend
  2946  0318  118A  256A  118A   	fcall	___lwdiv
  2947  031B  1283               	bcf	3,5	;RP0=0, select bank0
  2948  031C  1303               	bcf	3,6	;RP1=0, select bank0
  2949  031D  0825               	movf	?___lwdiv+1,w
  2950  031E  00AE               	movwf	___lwmod@dividend+1
  2951  031F  0824               	movf	?___lwdiv,w
  2952  0320  00AD               	movwf	___lwmod@dividend
  2953  0321  118A  2621  118A   	fcall	___lwmod
  2954  0324  1283               	bcf	3,5	;RP0=0, select bank0
  2955  0325  1303               	bcf	3,6	;RP1=0, select bank0
  2956  0326  082B               	movf	?___lwmod,w
  2957  0327  3E30               	addlw	48
  2958  0328  00B8               	movwf	??_printf+1
  2959  0329  0838               	movf	??_printf+1,w
  2960  032A  00BF               	movwf	printf@c
  2961                           
  2962                           ;doprnt.c: 1523: }
  2963                           ;doprnt.c: 1524: (putch(c) );
  2964  032B  083F               	movf	printf@c,w
  2965  032C  118A  205E  118A   	fcall	_putch
  2966  032F  2AF6               	goto	l1744
  2967  0330                     l257:	
  2968                           ;doprnt.c: 1540: return 0;
  2969                           ;	Return value of _printf is never used
  2970                           
  2971                           ;doprnt.c: 1525: }
  2972                           ;doprnt.c: 1533: }
  2973                           ;doprnt.c: 1535: alldone:
  2974                           
  2975  0330  0008               	return
  2976  0331                     __end_of_printf:	
  2977                           
  2978                           	psect	text15
  2979  005E                     __ptext15:	
  2980 ;; *************** function _putch *****************
  2981 ;; Defined at:
  2982 ;;		line 21 in file "main.c"
  2983 ;; Parameters:    Size  Location     Type
  2984 ;;  data            1    wreg     unsigned char 
  2985 ;; Auto vars:     Size  Location     Type
  2986 ;;  data            1    4[COMMON] unsigned char 
  2987 ;; Return value:  Size  Location     Type
  2988 ;;		None               void
  2989 ;; Registers used:
  2990 ;;		wreg
  2991 ;; Tracked objects:
  2992 ;;		On entry : 0/0
  2993 ;;		On exit  : 0/0
  2994 ;;		Unchanged: 0/0
  2995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2996 ;;      Params:         0       0       0       0
  2997 ;;      Locals:         1       0       0       0
  2998 ;;      Temps:          0       0       0       0
  2999 ;;      Totals:         1       0       0       0
  3000 ;;Total ram usage:        1 bytes
  3001 ;; Hardware stack levels used:    1
  3002 ;; Hardware stack levels required when called:    1
  3003 ;; This function calls:
  3004 ;;		Nothing
  3005 ;; This function is called by:
  3006 ;;		_printf
  3007 ;; This function uses a non-reentrant model
  3008 ;;
  3009                           
  3010                           
  3011                           ;psect for function _putch
  3012  005E                     _putch:	
  3013                           
  3014                           ;incstack = 0
  3015                           ; Regs used in _putch: [wreg]
  3016                           ;putch@data stored from wreg
  3017  005E  00F4               	movwf	putch@data
  3018  005F                     l34:	
  3019                           ;main.c: 23: continue;
  3020                           
  3021                           ;main.c: 22: while( ! TXIF)
  3022                           
  3023  005F  1283               	bcf	3,5	;RP0=0, select bank0
  3024  0060  1303               	bcf	3,6	;RP1=0, select bank0
  3025  0061  1E0C               	btfss	12,4	;volatile
  3026  0062  285F               	goto	l34
  3027                           
  3028                           ;main.c: 24: TXREG = data;
  3029  0063  0874               	movf	putch@data,w
  3030  0064  0099               	movwf	25	;volatile
  3031  0065  0008               	return
  3032  0066                     __end_of_putch:	
  3033                           
  3034                           	psect	text16
  3035  0621                     __ptext16:	
  3036 ;; *************** function ___lwmod *****************
  3037 ;; Defined at:
  3038 ;;		line 6 in file "/Applications/microchip/xc8/v1.34/sources/common/lwmod.c"
  3039 ;; Parameters:    Size  Location     Type
  3040 ;;  divisor         2   11[BANK0 ] unsigned int 
  3041 ;;  dividend        2   13[BANK0 ] unsigned int 
  3042 ;; Auto vars:     Size  Location     Type
  3043 ;;  counter         1   16[BANK0 ] unsigned char 
  3044 ;; Return value:  Size  Location     Type
  3045 ;;                  2   11[BANK0 ] unsigned int 
  3046 ;; Registers used:
  3047 ;;		wreg, status,2, status,0
  3048 ;; Tracked objects:
  3049 ;;		On entry : 0/0
  3050 ;;		On exit  : 0/0
  3051 ;;		Unchanged: 0/0
  3052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3053 ;;      Params:         0       4       0       0
  3054 ;;      Locals:         0       1       0       0
  3055 ;;      Temps:          0       1       0       0
  3056 ;;      Totals:         0       6       0       0
  3057 ;;Total ram usage:        6 bytes
  3058 ;; Hardware stack levels used:    1
  3059 ;; Hardware stack levels required when called:    1
  3060 ;; This function calls:
  3061 ;;		Nothing
  3062 ;; This function is called by:
  3063 ;;		_printf
  3064 ;; This function uses a non-reentrant model
  3065 ;;
  3066                           
  3067                           
  3068                           ;psect for function ___lwmod
  3069  0621                     ___lwmod:	
  3070                           
  3071                           ;incstack = 0
  3072                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3073  0621  1283               	bcf	3,5	;RP0=0, select bank0
  3074  0622  1303               	bcf	3,6	;RP1=0, select bank0
  3075  0623  082B               	movf	___lwmod@divisor,w
  3076  0624  042C               	iorwf	___lwmod@divisor+1,w
  3077  0625  1903               	btfsc	3,2
  3078  0626  2E50               	goto	l1272
  3079  0627  01B0               	clrf	___lwmod@counter
  3080  0628  0AB0               	incf	___lwmod@counter,f
  3081  0629                     l1262:	
  3082  0629  1BAC               	btfsc	___lwmod@divisor+1,7
  3083  062A  2E37               	goto	l1264
  3084  062B  3001               	movlw	1
  3085  062C                     u765:	
  3086  062C  1003               	clrc
  3087  062D  0DAB               	rlf	___lwmod@divisor,f
  3088  062E  0DAC               	rlf	___lwmod@divisor+1,f
  3089  062F  3EFF               	addlw	-1
  3090  0630  1D03               	skipz
  3091  0631  2E2C               	goto	u765
  3092  0632  3001               	movlw	1
  3093  0633  00AF               	movwf	??___lwmod
  3094  0634  082F               	movf	??___lwmod,w
  3095  0635  07B0               	addwf	___lwmod@counter,f
  3096  0636  2E29               	goto	l1262
  3097  0637                     l1264:	
  3098  0637  082C               	movf	___lwmod@divisor+1,w
  3099  0638  022E               	subwf	___lwmod@dividend+1,w
  3100  0639  1D03               	skipz
  3101  063A  2E3D               	goto	u785
  3102  063B  082B               	movf	___lwmod@divisor,w
  3103  063C  022D               	subwf	___lwmod@dividend,w
  3104  063D                     u785:	
  3105  063D  1C03               	skipc
  3106  063E  2E45               	goto	l1268
  3107  063F  082B               	movf	___lwmod@divisor,w
  3108  0640  02AD               	subwf	___lwmod@dividend,f
  3109  0641  082C               	movf	___lwmod@divisor+1,w
  3110  0642  1C03               	skipc
  3111  0643  03AE               	decf	___lwmod@dividend+1,f
  3112  0644  02AE               	subwf	___lwmod@dividend+1,f
  3113  0645                     l1268:	
  3114  0645  3001               	movlw	1
  3115  0646                     u795:	
  3116  0646  1003               	clrc
  3117  0647  0CAC               	rrf	___lwmod@divisor+1,f
  3118  0648  0CAB               	rrf	___lwmod@divisor,f
  3119  0649  3EFF               	addlw	-1
  3120  064A  1D03               	skipz
  3121  064B  2E46               	goto	u795
  3122  064C  3001               	movlw	1
  3123  064D  02B0               	subwf	___lwmod@counter,f
  3124  064E  1D03               	btfss	3,2
  3125  064F  2E37               	goto	l1264
  3126  0650                     l1272:	
  3127  0650  082E               	movf	___lwmod@dividend+1,w
  3128  0651  00AC               	movwf	?___lwmod+1
  3129  0652  082D               	movf	___lwmod@dividend,w
  3130  0653  00AB               	movwf	?___lwmod
  3131  0654  0008               	return
  3132  0655                     __end_of___lwmod:	
  3133                           
  3134                           	psect	text17
  3135  056A                     __ptext17:	
  3136 ;; *************** function ___lwdiv *****************
  3137 ;; Defined at:
  3138 ;;		line 6 in file "/Applications/microchip/xc8/v1.34/sources/common/lwdiv.c"
  3139 ;; Parameters:    Size  Location     Type
  3140 ;;  divisor         2    4[BANK0 ] unsigned int 
  3141 ;;  dividend        2    6[BANK0 ] unsigned int 
  3142 ;; Auto vars:     Size  Location     Type
  3143 ;;  quotient        2    9[BANK0 ] unsigned int 
  3144 ;;  counter         1    8[BANK0 ] unsigned char 
  3145 ;; Return value:  Size  Location     Type
  3146 ;;                  2    4[BANK0 ] unsigned int 
  3147 ;; Registers used:
  3148 ;;		wreg, status,2, status,0
  3149 ;; Tracked objects:
  3150 ;;		On entry : 0/0
  3151 ;;		On exit  : 0/0
  3152 ;;		Unchanged: 0/0
  3153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3154 ;;      Params:         0       4       0       0
  3155 ;;      Locals:         0       3       0       0
  3156 ;;      Temps:          1       0       0       0
  3157 ;;      Totals:         1       7       0       0
  3158 ;;Total ram usage:        8 bytes
  3159 ;; Hardware stack levels used:    1
  3160 ;; Hardware stack levels required when called:    1
  3161 ;; This function calls:
  3162 ;;		Nothing
  3163 ;; This function is called by:
  3164 ;;		_resetTuning
  3165 ;;		_printf
  3166 ;; This function uses a non-reentrant model
  3167 ;;
  3168                           
  3169                           
  3170                           ;psect for function ___lwdiv
  3171  056A                     ___lwdiv:	
  3172                           
  3173                           ;incstack = 0
  3174                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3175  056A  1283               	bcf	3,5	;RP0=0, select bank0
  3176  056B  1303               	bcf	3,6	;RP1=0, select bank0
  3177  056C  01A9               	clrf	___lwdiv@quotient
  3178  056D  01AA               	clrf	___lwdiv@quotient+1
  3179  056E  0824               	movf	___lwdiv@divisor,w
  3180  056F  0425               	iorwf	___lwdiv@divisor+1,w
  3181  0570  1903               	btfsc	3,2
  3182  0571  2DA3               	goto	l1696
  3183  0572  01A8               	clrf	___lwdiv@counter
  3184  0573  0AA8               	incf	___lwdiv@counter,f
  3185  0574                     l1684:	
  3186  0574  1BA5               	btfsc	___lwdiv@divisor+1,7
  3187  0575  2D82               	goto	l1686
  3188  0576  3001               	movlw	1
  3189  0577                     u1315:	
  3190  0577  1003               	clrc
  3191  0578  0DA4               	rlf	___lwdiv@divisor,f
  3192  0579  0DA5               	rlf	___lwdiv@divisor+1,f
  3193  057A  3EFF               	addlw	-1
  3194  057B  1D03               	skipz
  3195  057C  2D77               	goto	u1315
  3196  057D  3001               	movlw	1
  3197  057E  00F6               	movwf	??___lwdiv
  3198  057F  0876               	movf	??___lwdiv,w
  3199  0580  07A8               	addwf	___lwdiv@counter,f
  3200  0581  2D74               	goto	l1684
  3201  0582                     l1686:	
  3202  0582  3001               	movlw	1
  3203  0583                     u1335:	
  3204  0583  1003               	clrc
  3205  0584  0DA9               	rlf	___lwdiv@quotient,f
  3206  0585  0DAA               	rlf	___lwdiv@quotient+1,f
  3207  0586  3EFF               	addlw	-1
  3208  0587  1D03               	skipz
  3209  0588  2D83               	goto	u1335
  3210  0589  0825               	movf	___lwdiv@divisor+1,w
  3211  058A  0227               	subwf	___lwdiv@dividend+1,w
  3212  058B  1D03               	skipz
  3213  058C  2D8F               	goto	u1345
  3214  058D  0824               	movf	___lwdiv@divisor,w
  3215  058E  0226               	subwf	___lwdiv@dividend,w
  3216  058F                     u1345:	
  3217  058F  1C03               	skipc
  3218  0590  2D98               	goto	l1692
  3219  0591  0824               	movf	___lwdiv@divisor,w
  3220  0592  02A6               	subwf	___lwdiv@dividend,f
  3221  0593  0825               	movf	___lwdiv@divisor+1,w
  3222  0594  1C03               	skipc
  3223  0595  03A7               	decf	___lwdiv@dividend+1,f
  3224  0596  02A7               	subwf	___lwdiv@dividend+1,f
  3225  0597  1429               	bsf	___lwdiv@quotient,0
  3226  0598                     l1692:	
  3227  0598  3001               	movlw	1
  3228  0599                     u1355:	
  3229  0599  1003               	clrc
  3230  059A  0CA5               	rrf	___lwdiv@divisor+1,f
  3231  059B  0CA4               	rrf	___lwdiv@divisor,f
  3232  059C  3EFF               	addlw	-1
  3233  059D  1D03               	skipz
  3234  059E  2D99               	goto	u1355
  3235  059F  3001               	movlw	1
  3236  05A0  02A8               	subwf	___lwdiv@counter,f
  3237  05A1  1D03               	btfss	3,2
  3238  05A2  2D82               	goto	l1686
  3239  05A3                     l1696:	
  3240  05A3  082A               	movf	___lwdiv@quotient+1,w
  3241  05A4  00A5               	movwf	?___lwdiv+1
  3242  05A5  0829               	movf	___lwdiv@quotient,w
  3243  05A6  00A4               	movwf	?___lwdiv
  3244  05A7  0008               	return
  3245  05A8                     __end_of___lwdiv:	
  3246                           
  3247                           	psect	text18
  3248  0493                     __ptext18:	
  3249 ;; *************** function _play *****************
  3250 ;; Defined at:
  3251 ;;		line 279 in file "main.c"
  3252 ;; Parameters:    Size  Location     Type
  3253 ;;		None
  3254 ;; Auto vars:     Size  Location     Type
  3255 ;;  real_value      2   13[BANK0 ] unsigned int 
  3256 ;; Return value:  Size  Location     Type
  3257 ;;		None               void
  3258 ;; Registers used:
  3259 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3260 ;; Tracked objects:
  3261 ;;		On entry : 0/0
  3262 ;;		On exit  : 0/0
  3263 ;;		Unchanged: 0/0
  3264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3265 ;;      Params:         0       0       0       0
  3266 ;;      Locals:         0       2       0       0
  3267 ;;      Temps:          0       2       0       0
  3268 ;;      Totals:         0       4       0       0
  3269 ;;Total ram usage:        4 bytes
  3270 ;; Hardware stack levels used:    1
  3271 ;; Hardware stack levels required when called:    2
  3272 ;; This function calls:
  3273 ;;		_SPI_Write
  3274 ;;		_checkKey
  3275 ;;		_get_voltage
  3276 ;; This function is called by:
  3277 ;;		_main
  3278 ;; This function uses a non-reentrant model
  3279 ;;
  3280                           
  3281                           
  3282                           ;psect for function _play
  3283  0493                     _play:	
  3284                           
  3285                           ;main.c: 280: pressed_keys = 0;
  3286                           
  3287                           ;incstack = 0
  3288                           ; Regs used in _play: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3289  0493  1283               	bcf	3,5	;RP0=0, select bank0
  3290  0494  1303               	bcf	3,6	;RP1=0, select bank0
  3291  0495  01D5               	clrf	_pressed_keys
  3292  0496  01D6               	clrf	_pressed_keys+1
  3293                           
  3294                           ;main.c: 281: last_key = 100;
  3295  0497  3064               	movlw	100
  3296  0498  00D3               	movwf	_last_key
  3297  0499  3000               	movlw	0
  3298  049A  00D4               	movwf	_last_key+1
  3299                           
  3300                           ;main.c: 282: for (current_key = 0; current_key < key_count; current_key += 1) {
  3301  049B  01F9               	clrf	_current_key
  3302  049C                     l1930:	
  3303  049C  0879               	movf	_current_key,w
  3304  049D  00AB               	movwf	??_play
  3305  049E  01AC               	clrf	??_play+1
  3306  049F  0878               	movf	_key_count+1,w
  3307  04A0  022C               	subwf	??_play+1,w
  3308  04A1  1D03               	skipz
  3309  04A2  2CA5               	goto	u1715
  3310  04A3  0877               	movf	_key_count,w
  3311  04A4  022B               	subwf	??_play,w
  3312  04A5                     u1715:	
  3313  04A5  1803               	btfsc	3,0
  3314  04A6  2CC4               	goto	l1932
  3315                           
  3316                           ;main.c: 283: if (checkKey(current_key)) {
  3317  04A7  0879               	movf	_current_key,w
  3318  04A8  118A  2331  118A   	fcall	_checkKey
  3319  04AB  3A00               	xorlw	0
  3320  04AC  1903               	skipnz
  3321  04AD  2CBD               	goto	l1928
  3322                           
  3323                           ;main.c: 284: pressed_keys += 1;
  3324  04AE  3001               	movlw	1
  3325  04AF  1283               	bcf	3,5	;RP0=0, select bank0
  3326  04B0  1303               	bcf	3,6	;RP1=0, select bank0
  3327  04B1  07D5               	addwf	_pressed_keys,f
  3328  04B2  1803               	skipnc
  3329  04B3  0AD6               	incf	_pressed_keys+1,f
  3330  04B4  3000               	movlw	0
  3331  04B5  07D6               	addwf	_pressed_keys+1,f
  3332                           
  3333                           ;main.c: 285: last_key = current_key;
  3334  04B6  0879               	movf	_current_key,w
  3335  04B7  00AB               	movwf	??_play
  3336  04B8  01AC               	clrf	??_play+1
  3337  04B9  082B               	movf	??_play,w
  3338  04BA  00D3               	movwf	_last_key
  3339  04BB  082C               	movf	??_play+1,w
  3340  04BC  00D4               	movwf	_last_key+1
  3341  04BD                     l1928:	
  3342  04BD  3001               	movlw	1
  3343  04BE  1283               	bcf	3,5	;RP0=0, select bank0
  3344  04BF  1303               	bcf	3,6	;RP1=0, select bank0
  3345  04C0  00AB               	movwf	??_play
  3346  04C1  082B               	movf	??_play,w
  3347  04C2  07F9               	addwf	_current_key,f
  3348  04C3  2C9C               	goto	l1930
  3349  04C4                     l1932:	
  3350                           
  3351                           ;main.c: 286: }
  3352                           ;main.c: 287: }
  3353                           ;main.c: 289: if (pressed_keys > 0) {
  3354  04C4  0855               	movf	_pressed_keys,w
  3355  04C5  0456               	iorwf	_pressed_keys+1,w
  3356  04C6  1903               	btfsc	3,2
  3357  04C7  2CDF               	goto	l166
  3358                           
  3359                           ;main.c: 290: PORTCbits.RC5 = 1;
  3360  04C8  1687               	bsf	7,5	;volatile
  3361                           
  3362                           ;main.c: 292: uint16_t real_value = get_voltage(last_key);
  3363  04C9  0853               	movf	_last_key,w
  3364  04CA  00A0               	movwf	get_voltage@keyCode
  3365  04CB  0854               	movf	_last_key+1,w
  3366  04CC  00A1               	movwf	get_voltage@keyCode+1
  3367  04CD  01A2               	clrf	get_voltage@keyCode+2
  3368  04CE  01A3               	clrf	get_voltage@keyCode+3
  3369  04CF  118A  27BE  118A   	fcall	_get_voltage
  3370  04D2  1283               	bcf	3,5	;RP0=0, select bank0
  3371  04D3  1303               	bcf	3,6	;RP1=0, select bank0
  3372  04D4  0821               	movf	?_get_voltage+1,w
  3373  04D5  00AE               	movwf	play@real_value+1
  3374  04D6  0820               	movf	?_get_voltage,w
  3375  04D7  00AD               	movwf	play@real_value
  3376                           
  3377                           ;main.c: 294: SPI_Write(real_value);
  3378  04D8  082E               	movf	play@real_value+1,w
  3379  04D9  00F5               	movwf	SPI_Write@data+1
  3380  04DA  082D               	movf	play@real_value,w
  3381  04DB  00F4               	movwf	SPI_Write@data
  3382  04DC  118A  26B0         	fcall	_SPI_Write
  3383                           
  3384                           ;main.c: 295: } else {
  3385  04DE  0008               	return
  3386  04DF                     l166:	
  3387                           
  3388                           ;main.c: 296: PORTCbits.RC5 = 0;
  3389  04DF  1287               	bcf	7,5	;volatile
  3390  04E0  0008               	return
  3391  04E1                     __end_of_play:	
  3392                           
  3393                           	psect	text19
  3394  07BE                     __ptext19:	
  3395 ;; *************** function _get_voltage *****************
  3396 ;; Defined at:
  3397 ;;		line 142 in file "main.c"
  3398 ;; Parameters:    Size  Location     Type
  3399 ;;  keyCode         4    0[BANK0 ] unsigned long 
  3400 ;; Auto vars:     Size  Location     Type
  3401 ;;		None
  3402 ;; Return value:  Size  Location     Type
  3403 ;;                  4    0[BANK0 ] unsigned long 
  3404 ;; Registers used:
  3405 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3406 ;; Tracked objects:
  3407 ;;		On entry : 0/0
  3408 ;;		On exit  : 0/0
  3409 ;;		Unchanged: 0/0
  3410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3411 ;;      Params:         0       4       0       0
  3412 ;;      Locals:         0       0       0       0
  3413 ;;      Temps:          0       7       0       0
  3414 ;;      Totals:         0      11       0       0
  3415 ;;Total ram usage:       11 bytes
  3416 ;; Hardware stack levels used:    1
  3417 ;; Hardware stack levels required when called:    1
  3418 ;; This function calls:
  3419 ;;		Nothing
  3420 ;; This function is called by:
  3421 ;;		_play
  3422 ;; This function uses a non-reentrant model
  3423 ;;
  3424                           
  3425                           
  3426                           ;psect for function _get_voltage
  3427  07BE                     _get_voltage:	
  3428                           
  3429                           ;main.c: 157: return tuning[keyCode];
  3430                           
  3431                           ;incstack = 0
  3432                           ; Regs used in _get_voltage: [wreg-fsr0h+status,2+status,0]
  3433  07BE  1283               	bcf	3,5	;RP0=0, select bank0
  3434  07BF  1303               	bcf	3,6	;RP1=0, select bank0
  3435  07C0  0820               	movf	get_voltage@keyCode,w
  3436  07C1  00A4               	movwf	??_get_voltage
  3437  07C2  0724               	addwf	??_get_voltage,w
  3438  07C3  3EA0               	addlw	(low (_tuning| 0))& (0+255)
  3439  07C4  0084               	movwf	4
  3440  07C5  1383               	bcf	3,7	;select IRP bank1
  3441  07C6  0800               	movf	0,w
  3442  07C7  00A5               	movwf	??_get_voltage+1
  3443  07C8  0A84               	incf	4,f
  3444  07C9  0800               	movf	0,w
  3445  07CA  00A6               	movwf	??_get_voltage+2
  3446  07CB  0825               	movf	??_get_voltage+1,w
  3447  07CC  00A7               	movwf	??_get_voltage+3
  3448  07CD  0826               	movf	??_get_voltage+2,w
  3449  07CE  00A8               	movwf	??_get_voltage+4
  3450  07CF  01A9               	clrf	??_get_voltage+5
  3451  07D0  01AA               	clrf	??_get_voltage+6
  3452  07D1  082A               	movf	??_get_voltage+6,w
  3453  07D2  00A3               	movwf	?_get_voltage+3
  3454  07D3  0829               	movf	??_get_voltage+5,w
  3455  07D4  00A2               	movwf	?_get_voltage+2
  3456  07D5  0828               	movf	??_get_voltage+4,w
  3457  07D6  00A1               	movwf	?_get_voltage+1
  3458  07D7  0827               	movf	??_get_voltage+3,w
  3459  07D8  00A0               	movwf	?_get_voltage
  3460  07D9  0008               	return
  3461  07DA                     __end_of_get_voltage:	
  3462                           
  3463                           	psect	text20
  3464  0331                     __ptext20:	
  3465 ;; *************** function _checkKey *****************
  3466 ;; Defined at:
  3467 ;;		line 114 in file "main.c"
  3468 ;; Parameters:    Size  Location     Type
  3469 ;;  keyVal          1    wreg     unsigned char 
  3470 ;; Auto vars:     Size  Location     Type
  3471 ;;  keyVal          1    6[COMMON] unsigned char 
  3472 ;; Return value:  Size  Location     Type
  3473 ;;                  1    wreg      unsigned char 
  3474 ;; Registers used:
  3475 ;;		wreg, status,2, status,0
  3476 ;; Tracked objects:
  3477 ;;		On entry : 0/0
  3478 ;;		On exit  : 0/0
  3479 ;;		Unchanged: 0/0
  3480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3481 ;;      Params:         0       0       0       0
  3482 ;;      Locals:         1       0       0       0
  3483 ;;      Temps:          2       0       0       0
  3484 ;;      Totals:         3       0       0       0
  3485 ;;Total ram usage:        3 bytes
  3486 ;; Hardware stack levels used:    1
  3487 ;; Hardware stack levels required when called:    1
  3488 ;; This function calls:
  3489 ;;		Nothing
  3490 ;; This function is called by:
  3491 ;;		_tuningCheck
  3492 ;;		_tune
  3493 ;;		_play
  3494 ;; This function uses a non-reentrant model
  3495 ;;
  3496                           
  3497                           
  3498                           ;psect for function _checkKey
  3499  0331                     _checkKey:	
  3500                           
  3501                           ;incstack = 0
  3502                           ; Regs used in _checkKey: [wreg+status,2+status,0]
  3503                           ;checkKey@keyVal stored from wreg
  3504  0331  00F6               	movwf	checkKey@keyVal
  3505                           
  3506                           ;main.c: 115: keyVal = (key_count - keyVal - 1);
  3507  0332  0876               	movf	checkKey@keyVal,w
  3508  0333  3E01               	addlw	1
  3509  0334  3AFF               	xorlw	255
  3510  0335  3E01               	addlw	1
  3511  0336  0777               	addwf	_key_count,w
  3512  0337  00F4               	movwf	??_checkKey
  3513  0338  0874               	movf	??_checkKey,w
  3514  0339  00F6               	movwf	checkKey@keyVal
  3515                           
  3516                           ;main.c: 116: if (keyVal <= 15) {
  3517  033A  3010               	movlw	16
  3518  033B  0276               	subwf	checkKey@keyVal,w
  3519  033C  1803               	skipnc
  3520  033D  2B8C               	goto	l1446
  3521                           
  3522                           ;main.c: 117: PORTAbits.RA2 = (keyVal >> 0) & 1;
  3523  033E  0876               	movf	checkKey@keyVal,w
  3524  033F  3901               	andlw	1
  3525  0340  00F4               	movwf	??_checkKey
  3526  0341  0DF4               	rlf	??_checkKey,f
  3527  0342  0DF4               	rlf	??_checkKey,f
  3528  0343  1283               	bcf	3,5	;RP0=0, select bank0
  3529  0344  1303               	bcf	3,6	;RP1=0, select bank0
  3530  0345  0805               	movf	5,w	;volatile
  3531  0346  0674               	xorwf	??_checkKey,w
  3532  0347  39FB               	andlw	-5
  3533  0348  0674               	xorwf	??_checkKey,w
  3534  0349  0085               	movwf	5	;volatile
  3535                           
  3536                           ;main.c: 118: PORTCbits.RC0 = (keyVal >> 1) & 1;
  3537  034A  0876               	movf	checkKey@keyVal,w
  3538  034B  00F4               	movwf	??_checkKey
  3539  034C  3001               	movlw	1
  3540  034D                     u1075:	
  3541  034D  1003               	clrc
  3542  034E  0CF4               	rrf	??_checkKey,f
  3543  034F  3EFF               	addlw	-1
  3544  0350  1D03               	skipz
  3545  0351  2B4D               	goto	u1075
  3546  0352  3001               	movlw	1
  3547  0353  0574               	andwf	??_checkKey,w
  3548  0354  00F5               	movwf	??_checkKey+1
  3549  0355  0807               	movf	7,w	;volatile
  3550  0356  0675               	xorwf	??_checkKey+1,w
  3551  0357  39FE               	andlw	-2
  3552  0358  0675               	xorwf	??_checkKey+1,w
  3553  0359  0087               	movwf	7	;volatile
  3554                           
  3555                           ;main.c: 119: PORTCbits.RC1 = (keyVal >> 2) & 1;
  3556  035A  0876               	movf	checkKey@keyVal,w
  3557  035B  00F4               	movwf	??_checkKey
  3558  035C  3002               	movlw	2
  3559  035D                     u1085:	
  3560  035D  1003               	clrc
  3561  035E  0CF4               	rrf	??_checkKey,f
  3562  035F  3EFF               	addlw	-1
  3563  0360  1D03               	skipz
  3564  0361  2B5D               	goto	u1085
  3565  0362  0874               	movf	??_checkKey,w
  3566  0363  3901               	andlw	1
  3567  0364  00F5               	movwf	??_checkKey+1
  3568  0365  0DF5               	rlf	??_checkKey+1,f
  3569  0366  0807               	movf	7,w	;volatile
  3570  0367  0675               	xorwf	??_checkKey+1,w
  3571  0368  39FD               	andlw	-3
  3572  0369  0675               	xorwf	??_checkKey+1,w
  3573  036A  0087               	movwf	7	;volatile
  3574                           
  3575                           ;main.c: 120: PORTCbits.RC2 = (keyVal >> 3) & 1;
  3576  036B  0876               	movf	checkKey@keyVal,w
  3577  036C  00F4               	movwf	??_checkKey
  3578  036D  3003               	movlw	3
  3579  036E                     u1095:	
  3580  036E  1003               	clrc
  3581  036F  0CF4               	rrf	??_checkKey,f
  3582  0370  3EFF               	addlw	-1
  3583  0371  1D03               	skipz
  3584  0372  2B6E               	goto	u1095
  3585  0373  0874               	movf	??_checkKey,w
  3586  0374  3901               	andlw	1
  3587  0375  00F5               	movwf	??_checkKey+1
  3588  0376  0DF5               	rlf	??_checkKey+1,f
  3589  0377  0DF5               	rlf	??_checkKey+1,f
  3590  0378  0807               	movf	7,w	;volatile
  3591  0379  0675               	xorwf	??_checkKey+1,w
  3592  037A  39FB               	andlw	-5
  3593  037B  0675               	xorwf	??_checkKey+1,w
  3594  037C  0087               	movwf	7	;volatile
  3595                           
  3596                           ;main.c: 122: _delay((unsigned long)((1)*(8000000L/4000.0)));
  3597  037D  3003               	movlw	3
  3598  037E  00F5               	movwf	??_checkKey+1
  3599  037F  3097               	movlw	151
  3600  0380  00F4               	movwf	??_checkKey
  3601  0381                     u1777:	
  3602  0381  0BF4               	decfsz	??_checkKey,f
  3603  0382  2B81               	goto	u1777
  3604  0383  0BF5               	decfsz	??_checkKey+1,f
  3605  0384  2B81               	goto	u1777
  3606  0385  2B86               	nop2
  3607                           
  3608                           ;main.c: 124: if (PORTAbits.RA4 == 0) {
  3609  0386  1283               	bcf	3,5	;RP0=0, select bank0
  3610  0387  1303               	bcf	3,6	;RP1=0, select bank0
  3611  0388  1A05               	btfsc	5,4	;volatile
  3612  0389  2BC5               	goto	l1456
  3613                           
  3614                           ;main.c: 125: return 1;
  3615  038A  3001               	movlw	1
  3616  038B  0008               	return
  3617  038C                     l1446:	
  3618                           ;main.c: 126: }
  3619                           ;main.c: 127: } else {
  3620                           
  3621                           
  3622                           ;main.c: 128: PORTBbits.RB4 = (keyVal >> 0) & 1;
  3623  038C  0876               	movf	checkKey@keyVal,w
  3624  038D  3901               	andlw	1
  3625  038E  00F4               	movwf	??_checkKey
  3626  038F  0EF4               	swapf	??_checkKey,f
  3627  0390  1283               	bcf	3,5	;RP0=0, select bank0
  3628  0391  1303               	bcf	3,6	;RP1=0, select bank0
  3629  0392  0806               	movf	6,w	;volatile
  3630  0393  0674               	xorwf	??_checkKey,w
  3631  0394  39EF               	andlw	-17
  3632  0395  0674               	xorwf	??_checkKey,w
  3633  0396  0086               	movwf	6	;volatile
  3634                           
  3635                           ;main.c: 129: PORTCbits.RC3 = (keyVal >> 1) & 1;
  3636  0397  0876               	movf	checkKey@keyVal,w
  3637  0398  00F4               	movwf	??_checkKey
  3638  0399  1003               	clrc
  3639  039A  0C74               	rrf	??_checkKey,w
  3640  039B  3901               	andlw	1
  3641  039C  00F5               	movwf	??_checkKey+1
  3642  039D  0DF5               	rlf	??_checkKey+1,f
  3643  039E  0DF5               	rlf	??_checkKey+1,f
  3644  039F  0DF5               	rlf	??_checkKey+1,f
  3645  03A0  0807               	movf	7,w	;volatile
  3646  03A1  0675               	xorwf	??_checkKey+1,w
  3647  03A2  39F7               	andlw	-9
  3648  03A3  0675               	xorwf	??_checkKey+1,w
  3649  03A4  0087               	movwf	7	;volatile
  3650                           
  3651                           ;main.c: 130: PORTCbits.RC4 = (keyVal >> 2) & 1;
  3652  03A5  0876               	movf	checkKey@keyVal,w
  3653  03A6  00F4               	movwf	??_checkKey
  3654  03A7  3002               	movlw	2
  3655  03A8                     u1115:	
  3656  03A8  1003               	clrc
  3657  03A9  0CF4               	rrf	??_checkKey,f
  3658  03AA  3EFF               	addlw	-1
  3659  03AB  1D03               	skipz
  3660  03AC  2BA8               	goto	u1115
  3661  03AD  0874               	movf	??_checkKey,w
  3662  03AE  3901               	andlw	1
  3663  03AF  00F5               	movwf	??_checkKey+1
  3664  03B0  0EF5               	swapf	??_checkKey+1,f
  3665  03B1  0807               	movf	7,w	;volatile
  3666  03B2  0675               	xorwf	??_checkKey+1,w
  3667  03B3  39EF               	andlw	-17
  3668  03B4  0675               	xorwf	??_checkKey+1,w
  3669  03B5  0087               	movwf	7	;volatile
  3670                           
  3671                           ;main.c: 132: _delay((unsigned long)((1)*(8000000L/4000.0)));
  3672  03B6  3003               	movlw	3
  3673  03B7  00F5               	movwf	??_checkKey+1
  3674  03B8  3097               	movlw	151
  3675  03B9  00F4               	movwf	??_checkKey
  3676  03BA                     u1787:	
  3677  03BA  0BF4               	decfsz	??_checkKey,f
  3678  03BB  2BBA               	goto	u1787
  3679  03BC  0BF5               	decfsz	??_checkKey+1,f
  3680  03BD  2BBA               	goto	u1787
  3681  03BE  2BBF               	nop2
  3682                           
  3683                           ;main.c: 134: if (PORTAbits.RA5 == 0) {
  3684  03BF  1283               	bcf	3,5	;RP0=0, select bank0
  3685  03C0  1303               	bcf	3,6	;RP1=0, select bank0
  3686  03C1  1A85               	btfsc	5,5	;volatile
  3687  03C2  2BC5               	goto	l1456
  3688                           
  3689                           ;main.c: 135: return 1;
  3690  03C3  3001               	movlw	1
  3691  03C4  0008               	return
  3692  03C5                     l1456:	
  3693                           
  3694                           ;main.c: 136: }
  3695                           ;main.c: 137: }
  3696                           ;main.c: 138: return 0;
  3697  03C5  3000               	movlw	0
  3698  03C6  0008               	return
  3699  03C7                     __end_of_checkKey:	
  3700                           
  3701                           	psect	text21
  3702  06B0                     __ptext21:	
  3703 ;; *************** function _SPI_Write *****************
  3704 ;; Defined at:
  3705 ;;		line 28 in file "main.c"
  3706 ;; Parameters:    Size  Location     Type
  3707 ;;  data            2    4[COMMON] unsigned int 
  3708 ;; Auto vars:     Size  Location     Type
  3709 ;;  config          2    2[BANK0 ] unsigned int 
  3710 ;; Return value:  Size  Location     Type
  3711 ;;		None               void
  3712 ;; Registers used:
  3713 ;;		wreg, status,2, status,0
  3714 ;; Tracked objects:
  3715 ;;		On entry : 0/0
  3716 ;;		On exit  : 0/0
  3717 ;;		Unchanged: 0/0
  3718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3719 ;;      Params:         2       0       0       0
  3720 ;;      Locals:         0       2       0       0
  3721 ;;      Temps:          0       2       0       0
  3722 ;;      Totals:         2       4       0       0
  3723 ;;Total ram usage:        6 bytes
  3724 ;; Hardware stack levels used:    1
  3725 ;; Hardware stack levels required when called:    1
  3726 ;; This function calls:
  3727 ;;		Nothing
  3728 ;; This function is called by:
  3729 ;;		_tune
  3730 ;;		_play
  3731 ;; This function uses a non-reentrant model
  3732 ;;
  3733                           
  3734                           
  3735                           ;psect for function _SPI_Write
  3736  06B0                     _SPI_Write:	
  3737                           
  3738                           ;main.c: 30: PORTCbits.RC6 = 0;
  3739                           
  3740                           ;incstack = 0
  3741                           ; Regs used in _SPI_Write: [wreg+status,2+status,0]
  3742  06B0  1283               	bcf	3,5	;RP0=0, select bank0
  3743  06B1  1303               	bcf	3,6	;RP1=0, select bank0
  3744  06B2  1307               	bcf	7,6	;volatile
  3745                           
  3746                           ;main.c: 33: uint16_t config = 0x3 << 12;
  3747  06B3  3000               	movlw	0
  3748  06B4  00A2               	movwf	SPI_Write@config
  3749  06B5  3030               	movlw	48
  3750  06B6  00A3               	movwf	SPI_Write@config+1
  3751                           
  3752                           ;main.c: 34: data = data & 0x0FFF;
  3753  06B7  30FF               	movlw	255
  3754  06B8  0574               	andwf	SPI_Write@data,w
  3755  06B9  00F4               	movwf	SPI_Write@data
  3756  06BA  300F               	movlw	15
  3757  06BB  0575               	andwf	SPI_Write@data+1,w
  3758  06BC  00F5               	movwf	SPI_Write@data+1
  3759                           
  3760                           ;main.c: 36: config = (config | data) >> 8;
  3761  06BD  0874               	movf	SPI_Write@data,w
  3762  06BE  0422               	iorwf	SPI_Write@config,w
  3763  06BF  00A0               	movwf	??_SPI_Write
  3764  06C0  0875               	movf	SPI_Write@data+1,w
  3765  06C1  0423               	iorwf	SPI_Write@config+1,w
  3766  06C2  00A1               	movwf	??_SPI_Write+1
  3767  06C3  0821               	movf	??_SPI_Write+1,w
  3768  06C4  00A0               	movwf	??_SPI_Write
  3769  06C5  01A1               	clrf	??_SPI_Write+1
  3770  06C6  0820               	movf	??_SPI_Write,w
  3771  06C7  00A2               	movwf	SPI_Write@config
  3772  06C8  0821               	movf	??_SPI_Write+1,w
  3773  06C9  00A3               	movwf	SPI_Write@config+1
  3774                           
  3775                           ;main.c: 38: SSPBUF = config;
  3776  06CA  0822               	movf	SPI_Write@config,w
  3777  06CB  0093               	movwf	19	;volatile
  3778  06CC                     l40:	
  3779                           ;main.c: 39: while( ! SSPSTATbits.BF);
  3780                           
  3781  06CC  1683               	bsf	3,5	;RP0=1, select bank1
  3782  06CD  1303               	bcf	3,6	;RP1=0, select bank1
  3783  06CE  1C14               	btfss	20,0	;volatile
  3784  06CF  2ECC               	goto	l40
  3785                           
  3786                           ;main.c: 41: SSPBUF = data;
  3787  06D0  0874               	movf	SPI_Write@data,w
  3788  06D1  1283               	bcf	3,5	;RP0=0, select bank0
  3789  06D2  1303               	bcf	3,6	;RP1=0, select bank0
  3790  06D3  0093               	movwf	19	;volatile
  3791  06D4                     l43:	
  3792                           ;main.c: 42: while( ! SSPSTATbits.BF);
  3793                           
  3794  06D4  1683               	bsf	3,5	;RP0=1, select bank1
  3795  06D5  1303               	bcf	3,6	;RP1=0, select bank1
  3796  06D6  1C14               	btfss	20,0	;volatile
  3797  06D7  2ED4               	goto	l43
  3798                           
  3799                           ;main.c: 45: PORTCbits.RC6 = 1;
  3800  06D8  1283               	bcf	3,5	;RP0=0, select bank0
  3801  06D9  1303               	bcf	3,6	;RP1=0, select bank0
  3802  06DA  1707               	bsf	7,6	;volatile
  3803  06DB  0008               	return
  3804  06DC                     __end_of_SPI_Write:	
  3805                           
  3806                           	psect	text22
  3807  0705                     __ptext22:	
  3808 ;; *************** function _load_tuning *****************
  3809 ;; Defined at:
  3810 ;;		line 174 in file "main.c"
  3811 ;; Parameters:    Size  Location     Type
  3812 ;;		None
  3813 ;; Auto vars:     Size  Location     Type
  3814 ;;		None
  3815 ;; Return value:  Size  Location     Type
  3816 ;;		None               void
  3817 ;; Registers used:
  3818 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3819 ;; Tracked objects:
  3820 ;;		On entry : 0/0
  3821 ;;		On exit  : 0/0
  3822 ;;		Unchanged: 0/0
  3823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3824 ;;      Params:         0       0       0       0
  3825 ;;      Locals:         0       0       0       0
  3826 ;;      Temps:          0       2       0       0
  3827 ;;      Totals:         0       2       0       0
  3828 ;;Total ram usage:        2 bytes
  3829 ;; Hardware stack levels used:    1
  3830 ;; Hardware stack levels required when called:    3
  3831 ;; This function calls:
  3832 ;;		_read16_eeprom
  3833 ;; This function is called by:
  3834 ;;		_main
  3835 ;; This function uses a non-reentrant model
  3836 ;;
  3837                           
  3838                           
  3839                           ;psect for function _load_tuning
  3840  0705                     _load_tuning:	
  3841                           
  3842                           ;main.c: 175: for (current_key = 0; current_key < key_count; current_key += 1) {
  3843                           
  3844                           ;incstack = 0
  3845                           ; Regs used in _load_tuning: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3846  0705  01F9               	clrf	_current_key
  3847  0706                     l1878:	
  3848  0706  0879               	movf	_current_key,w
  3849  0707  1283               	bcf	3,5	;RP0=0, select bank0
  3850  0708  1303               	bcf	3,6	;RP1=0, select bank0
  3851  0709  00AB               	movwf	??_load_tuning
  3852  070A  01AC               	clrf	??_load_tuning+1
  3853  070B  0878               	movf	_key_count+1,w
  3854  070C  022C               	subwf	??_load_tuning+1,w
  3855  070D  1D03               	skipz
  3856  070E  2F11               	goto	u1615
  3857  070F  0877               	movf	_key_count,w
  3858  0710  022B               	subwf	??_load_tuning,w
  3859  0711                     u1615:	
  3860  0711  1803               	btfsc	3,0
  3861  0712  0008               	return
  3862                           
  3863                           ;main.c: 176: tuning[current_key] = read16_eeprom(current_key*2);
  3864  0713  0879               	movf	_current_key,w
  3865  0714  1283               	bcf	3,5	;RP0=0, select bank0
  3866  0715  1303               	bcf	3,6	;RP1=0, select bank0
  3867  0716  00AB               	movwf	??_load_tuning
  3868  0717  072B               	addwf	??_load_tuning,w
  3869  0718  118A  26DC  118A   	fcall	_read16_eeprom
  3870  071B  0879               	movf	_current_key,w
  3871  071C  1283               	bcf	3,5	;RP0=0, select bank0
  3872  071D  1303               	bcf	3,6	;RP1=0, select bank0
  3873  071E  00AC               	movwf	??_load_tuning+1
  3874  071F  072C               	addwf	??_load_tuning+1,w
  3875  0720  3EA0               	addlw	(low (_tuning| 0))& (0+255)
  3876  0721  0084               	movwf	4
  3877  0722  0820               	movf	?_read16_eeprom,w
  3878  0723  1383               	bcf	3,7	;select IRP bank1
  3879  0724  0080               	movwf	0
  3880  0725  0A84               	incf	4,f
  3881  0726  0821               	movf	?_read16_eeprom+1,w
  3882  0727  0080               	movwf	0
  3883  0728  3001               	movlw	1
  3884  0729  00AB               	movwf	??_load_tuning
  3885  072A  082B               	movf	??_load_tuning,w
  3886  072B  07F9               	addwf	_current_key,f
  3887  072C  2F06               	goto	l1878
  3888  072D                     __end_of_load_tuning:	
  3889                           
  3890                           	psect	text23
  3891  06DC                     __ptext23:	
  3892 ;; *************** function _read16_eeprom *****************
  3893 ;; Defined at:
  3894 ;;		line 85 in file "main.c"
  3895 ;; Parameters:    Size  Location     Type
  3896 ;;  addr            1    wreg     unsigned char 
  3897 ;; Auto vars:     Size  Location     Type
  3898 ;;  addr            1   10[BANK0 ] unsigned char 
  3899 ;;  toRet           2    6[BANK0 ] unsigned int 
  3900 ;;  hi_byte         1    9[BANK0 ] unsigned char 
  3901 ;;  lo_byte         1    8[BANK0 ] unsigned char 
  3902 ;; Return value:  Size  Location     Type
  3903 ;;                  2    0[BANK0 ] unsigned int 
  3904 ;; Registers used:
  3905 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3906 ;; Tracked objects:
  3907 ;;		On entry : 0/0
  3908 ;;		On exit  : 0/0
  3909 ;;		Unchanged: 0/0
  3910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3911 ;;      Params:         0       2       0       0
  3912 ;;      Locals:         0       5       0       0
  3913 ;;      Temps:          0       4       0       0
  3914 ;;      Totals:         0      11       0       0
  3915 ;;Total ram usage:       11 bytes
  3916 ;; Hardware stack levels used:    1
  3917 ;; Hardware stack levels required when called:    2
  3918 ;; This function calls:
  3919 ;;		_eeprom_read
  3920 ;; This function is called by:
  3921 ;;		_load_tuning
  3922 ;; This function uses a non-reentrant model
  3923 ;;
  3924                           
  3925                           
  3926                           ;psect for function _read16_eeprom
  3927  06DC                     _read16_eeprom:	
  3928                           
  3929                           ;incstack = 0
  3930                           ; Regs used in _read16_eeprom: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3931                           ;read16_eeprom@addr stored from wreg
  3932  06DC  1283               	bcf	3,5	;RP0=0, select bank0
  3933  06DD  1303               	bcf	3,6	;RP1=0, select bank0
  3934  06DE  00AA               	movwf	read16_eeprom@addr
  3935                           
  3936                           ;main.c: 86: uint8_t lo_byte = eeprom_read(addr);
  3937  06DF  082A               	movf	read16_eeprom@addr,w
  3938  06E0  118A  27DA  118A   	fcall	_eeprom_read
  3939  06E3  1283               	bcf	3,5	;RP0=0, select bank0
  3940  06E4  1303               	bcf	3,6	;RP1=0, select bank0
  3941  06E5  00A2               	movwf	??_read16_eeprom
  3942  06E6  0822               	movf	??_read16_eeprom,w
  3943  06E7  00A8               	movwf	read16_eeprom@lo_byte
  3944                           
  3945                           ;main.c: 87: uint8_t hi_byte = eeprom_read(addr+1);
  3946  06E8  082A               	movf	read16_eeprom@addr,w
  3947  06E9  3E01               	addlw	1
  3948  06EA  118A  27DA         	fcall	_eeprom_read
  3949  06EC  1283               	bcf	3,5	;RP0=0, select bank0
  3950  06ED  1303               	bcf	3,6	;RP1=0, select bank0
  3951  06EE  00A2               	movwf	??_read16_eeprom
  3952  06EF  0822               	movf	??_read16_eeprom,w
  3953  06F0  00A9               	movwf	read16_eeprom@hi_byte
  3954                           
  3955                           ;main.c: 88: uint16_t toRet = (hi_byte << 8 | lo_byte);
  3956  06F1  0828               	movf	read16_eeprom@lo_byte,w
  3957  06F2  00A2               	movwf	??_read16_eeprom
  3958  06F3  01A3               	clrf	??_read16_eeprom+1
  3959  06F4  0829               	movf	read16_eeprom@hi_byte,w
  3960  06F5  00A4               	movwf	??_read16_eeprom+2
  3961  06F6  01A5               	clrf	??_read16_eeprom+3
  3962  06F7  0824               	movf	??_read16_eeprom+2,w
  3963  06F8  00A5               	movwf	??_read16_eeprom+3
  3964  06F9  01A4               	clrf	??_read16_eeprom+2
  3965  06FA  0822               	movf	??_read16_eeprom,w
  3966  06FB  0424               	iorwf	??_read16_eeprom+2,w
  3967  06FC  00A6               	movwf	read16_eeprom@toRet
  3968  06FD  0823               	movf	??_read16_eeprom+1,w
  3969  06FE  0425               	iorwf	??_read16_eeprom+3,w
  3970  06FF  00A7               	movwf	read16_eeprom@toRet+1
  3971                           
  3972                           ;main.c: 91: return toRet;
  3973  0700  0827               	movf	read16_eeprom@toRet+1,w
  3974  0701  00A1               	movwf	?_read16_eeprom+1
  3975  0702  0826               	movf	read16_eeprom@toRet,w
  3976  0703  00A0               	movwf	?_read16_eeprom
  3977  0704  0008               	return
  3978  0705                     __end_of_read16_eeprom:	
  3979                           
  3980                           	psect	text24
  3981  07DA                     __ptext24:	
  3982 ;; *************** function _eeprom_read *****************
  3983 ;; Defined at:
  3984 ;;		line 6 in file "/Applications/microchip/xc8/v1.34/sources/pic/eeread.c"
  3985 ;; Parameters:    Size  Location     Type
  3986 ;;  addr            1    wreg     unsigned char 
  3987 ;; Auto vars:     Size  Location     Type
  3988 ;;  addr            1    5[COMMON] unsigned char 
  3989 ;; Return value:  Size  Location     Type
  3990 ;;                  1    wreg      unsigned char 
  3991 ;; Registers used:
  3992 ;;		wreg, status,2, status,0
  3993 ;; Tracked objects:
  3994 ;;		On entry : 0/0
  3995 ;;		On exit  : 0/0
  3996 ;;		Unchanged: 0/0
  3997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3998 ;;      Params:         0       0       0       0
  3999 ;;      Locals:         1       0       0       0
  4000 ;;      Temps:          1       0       0       0
  4001 ;;      Totals:         2       0       0       0
  4002 ;;Total ram usage:        2 bytes
  4003 ;; Hardware stack levels used:    1
  4004 ;; Hardware stack levels required when called:    1
  4005 ;; This function calls:
  4006 ;;		Nothing
  4007 ;; This function is called by:
  4008 ;;		_read16_eeprom
  4009 ;; This function uses a non-reentrant model
  4010 ;;
  4011                           
  4012                           
  4013                           ;psect for function _eeprom_read
  4014  07DA                     _eeprom_read:	
  4015                           
  4016                           ;incstack = 0
  4017                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  4018                           ;eeprom_read@addr stored from wreg
  4019  07DA  00F5               	movwf	eeprom_read@addr
  4020  07DB                     l270:	
  4021  07DB  0064               	clrwdt	;# 
  4022  07DC  1683               	bsf	3,5	;RP0=1, select bank3
  4023  07DD  1703               	bsf	3,6	;RP1=1, select bank3
  4024  07DE  188C               	btfsc	12,1	;volsfr
  4025  07DF  2FDB               	goto	l270
  4026  07E0  0875               	movf	eeprom_read@addr,w
  4027  07E1  1283               	bcf	3,5	;RP0=0, select bank2
  4028  07E2  1703               	bsf	3,6	;RP1=1, select bank2
  4029  07E3  008D               	movwf	13	;volatile
  4030  07E4  303F               	movlw	63
  4031  07E5  00F4               	movwf	??_eeprom_read
  4032  07E6  0874               	movf	??_eeprom_read,w
  4033  07E7  1683               	bsf	3,5	;RP0=1, select bank3
  4034  07E8  1703               	bsf	3,6	;RP1=1, select bank3
  4035  07E9  058C               	andwf	12,f	;volsfr
  4036  07EA  140C               	bsf	12,0	;volsfr
  4037  07EB  1003               	clrc
  4038  07EC  180C               	btfsc	12,0	;volsfr
  4039  07ED  1403               	setc
  4040  07EE  3000               	movlw	0
  4041  07EF  1803               	skipnc
  4042  07F0  3001               	movlw	1
  4043  07F1  1283               	bcf	3,5	;RP0=0, select bank2
  4044  07F2  1703               	bsf	3,6	;RP1=1, select bank2
  4045  07F3  080C               	movf	12,w	;volatile
  4046  07F4  0008               	return
  4047  07F5                     __end_of_eeprom_read:	
  4048                           
  4049                           	psect	text25
  4050  05A8                     __ptext25:	
  4051 ;; *************** function _InitApp *****************
  4052 ;; Defined at:
  4053 ;;		line 22 in file "user.c"
  4054 ;; Parameters:    Size  Location     Type
  4055 ;;		None
  4056 ;; Auto vars:     Size  Location     Type
  4057 ;;		None
  4058 ;; Return value:  Size  Location     Type
  4059 ;;		None               void
  4060 ;; Registers used:
  4061 ;;		wreg, status,2, status,0
  4062 ;; Tracked objects:
  4063 ;;		On entry : 0/0
  4064 ;;		On exit  : 0/0
  4065 ;;		Unchanged: 0/0
  4066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4067 ;;      Params:         0       0       0       0
  4068 ;;      Locals:         0       0       0       0
  4069 ;;      Temps:          0       0       0       0
  4070 ;;      Totals:         0       0       0       0
  4071 ;;Total ram usage:        0 bytes
  4072 ;; Hardware stack levels used:    1
  4073 ;; Hardware stack levels required when called:    1
  4074 ;; This function calls:
  4075 ;;		Nothing
  4076 ;; This function is called by:
  4077 ;;		_main
  4078 ;; This function uses a non-reentrant model
  4079 ;;
  4080                           
  4081                           
  4082                           ;psect for function _InitApp
  4083  05A8                     _InitApp:	
  4084                           
  4085                           ;user.c: 24: OSCCON = 0x70;
  4086                           
  4087                           ;incstack = 0
  4088                           ; Regs used in _InitApp: [wreg+status,2+status,0]
  4089  05A8  3070               	movlw	112
  4090  05A9  1683               	bsf	3,5	;RP0=1, select bank1
  4091  05AA  1303               	bcf	3,6	;RP1=0, select bank1
  4092  05AB  008F               	movwf	15	;volatile
  4093                           
  4094                           ;user.c: 27: ANSEL = 0;
  4095  05AC  1283               	bcf	3,5	;RP0=0, select bank2
  4096  05AD  1703               	bsf	3,6	;RP1=1, select bank2
  4097  05AE  019E               	clrf	30	;volatile
  4098                           
  4099                           ;user.c: 28: ANSELH = 0;
  4100  05AF  019F               	clrf	31	;volatile
  4101                           
  4102                           ;user.c: 31: TRISA = 0;
  4103  05B0  1683               	bsf	3,5	;RP0=1, select bank1
  4104  05B1  1303               	bcf	3,6	;RP1=0, select bank1
  4105  05B2  0185               	clrf	5	;volatile
  4106                           
  4107                           ;user.c: 32: TRISB = 0;
  4108  05B3  0186               	clrf	6	;volatile
  4109                           
  4110                           ;user.c: 33: TRISC = 0;
  4111  05B4  0187               	clrf	7	;volatile
  4112                           
  4113                           ;user.c: 39: TRISBbits.TRISB5 = 1;
  4114  05B5  1686               	bsf	6,5	;volatile
  4115                           
  4116                           ;user.c: 40: TRISBbits.TRISB7 = 1;
  4117  05B6  1786               	bsf	6,7	;volatile
  4118                           
  4119                           ;user.c: 42: BAUDCTLbits.BRG16 = 0;
  4120  05B7  119B               	bcf	27,3	;volatile
  4121                           
  4122                           ;user.c: 44: SPBRG = 51;
  4123  05B8  3033               	movlw	51
  4124  05B9  0099               	movwf	25	;volatile
  4125                           
  4126                           ;user.c: 47: BRGH = 1;
  4127  05BA  1518               	bsf	24,2	;volatile
  4128                           
  4129                           ;user.c: 48: SYNC = 0;
  4130  05BB  1218               	bcf	24,4	;volatile
  4131                           
  4132                           ;user.c: 49: SPEN = 1;
  4133  05BC  1283               	bcf	3,5	;RP0=0, select bank0
  4134  05BD  1303               	bcf	3,6	;RP1=0, select bank0
  4135  05BE  1798               	bsf	24,7	;volatile
  4136                           
  4137                           ;user.c: 50: CREN = 0;
  4138  05BF  1218               	bcf	24,4	;volatile
  4139                           
  4140                           ;user.c: 51: TXEN = 1;
  4141  05C0  1683               	bsf	3,5	;RP0=1, select bank1
  4142  05C1  1303               	bcf	3,6	;RP1=0, select bank1
  4143  05C2  1698               	bsf	24,5	;volatile
  4144                           
  4145                           ;user.c: 60: TRISCbits.TRISC7 = 0;
  4146  05C3  1387               	bcf	7,7	;volatile
  4147                           
  4148                           ;user.c: 61: TRISBbits.TRISB4 = 1;
  4149  05C4  1606               	bsf	6,4	;volatile
  4150                           
  4151                           ;user.c: 62: TRISBbits.TRISB6 = 0;
  4152  05C5  1306               	bcf	6,6	;volatile
  4153                           
  4154                           ;user.c: 63: TRISCbits.TRISC6 = 0;
  4155  05C6  1307               	bcf	7,6	;volatile
  4156                           
  4157                           ;user.c: 64: PORTCbits.RC6 = 1;
  4158  05C7  1283               	bcf	3,5	;RP0=0, select bank0
  4159  05C8  1303               	bcf	3,6	;RP1=0, select bank0
  4160  05C9  1707               	bsf	7,6	;volatile
  4161                           
  4162                           ;user.c: 66: SSPCONbits.SSPEN = 0;
  4163  05CA  1294               	bcf	20,5	;volatile
  4164                           
  4165                           ;user.c: 67: SSPCONbits.SSPM = 0b0000;
  4166  05CB  30F0               	movlw	-16
  4167  05CC  0594               	andwf	20,f	;volatile
  4168                           
  4169                           ;user.c: 68: SSPSTATbits.SMP = 1;
  4170  05CD  1683               	bsf	3,5	;RP0=1, select bank1
  4171  05CE  1303               	bcf	3,6	;RP1=0, select bank1
  4172  05CF  1794               	bsf	20,7	;volatile
  4173                           
  4174                           ;user.c: 69: SSPSTATbits.CKE = 1;
  4175  05D0  1714               	bsf	20,6	;volatile
  4176                           
  4177                           ;user.c: 70: SSPCONbits.CKP = 0;
  4178  05D1  1283               	bcf	3,5	;RP0=0, select bank0
  4179  05D2  1303               	bcf	3,6	;RP1=0, select bank0
  4180  05D3  1214               	bcf	20,4	;volatile
  4181                           
  4182                           ;user.c: 72: SSPCONbits.SSPEN = 1;
  4183  05D4  1694               	bsf	20,5	;volatile
  4184                           
  4185                           ;user.c: 77: TRISCbits.TRISC5 = 0;
  4186  05D5  1683               	bsf	3,5	;RP0=1, select bank1
  4187  05D6  1303               	bcf	3,6	;RP1=0, select bank1
  4188  05D7  1287               	bcf	7,5	;volatile
  4189                           
  4190                           ;user.c: 80: TRISAbits.TRISA4 = 1;
  4191  05D8  1605               	bsf	5,4	;volatile
  4192                           
  4193                           ;user.c: 81: nRABPU = 0;
  4194  05D9  1381               	bcf	1,7	;volatile
  4195                           
  4196                           ;user.c: 82: WPUAbits.WPUA4 = 1;
  4197  05DA  1615               	bsf	21,4	;volatile
  4198                           
  4199                           ;user.c: 83: TRISAbits.TRISA2 = 0;
  4200  05DB  1105               	bcf	5,2	;volatile
  4201                           
  4202                           ;user.c: 84: TRISCbits.TRISC0 = 0;
  4203  05DC  1007               	bcf	7,0	;volatile
  4204                           
  4205                           ;user.c: 85: TRISCbits.TRISC1 = 0;
  4206  05DD  1087               	bcf	7,1	;volatile
  4207                           
  4208                           ;user.c: 86: TRISCbits.TRISC2 = 0;
  4209  05DE  1107               	bcf	7,2	;volatile
  4210                           
  4211                           ;user.c: 89: TRISAbits.TRISA5 = 1;
  4212  05DF  1685               	bsf	5,5	;volatile
  4213                           
  4214                           ;user.c: 90: nRABPU = 0;
  4215  05E0  1381               	bcf	1,7	;volatile
  4216                           
  4217                           ;user.c: 91: WPUAbits.WPUA5 = 1;
  4218  05E1  1695               	bsf	21,5	;volatile
  4219                           
  4220                           ;user.c: 92: TRISBbits.TRISB4 = 0;
  4221  05E2  1206               	bcf	6,4	;volatile
  4222                           
  4223                           ;user.c: 93: TRISCbits.TRISC3 = 0;
  4224  05E3  1187               	bcf	7,3	;volatile
  4225                           
  4226                           ;user.c: 94: TRISCbits.TRISC4 = 0;
  4227  05E4  1207               	bcf	7,4	;volatile
  4228  05E5  0008               	return
  4229  05E6                     __end_of_InitApp:	
  4230                           
  4231                           	psect	text26
  4232  0066                     __ptext26:	
  4233 ;; *************** function _ConfigureOscillator *****************
  4234 ;; Defined at:
  4235 ;;		line 18 in file "system.c"
  4236 ;; Parameters:    Size  Location     Type
  4237 ;;		None
  4238 ;; Auto vars:     Size  Location     Type
  4239 ;;		None
  4240 ;; Return value:  Size  Location     Type
  4241 ;;		None               void
  4242 ;; Registers used:
  4243 ;;		wreg
  4244 ;; Tracked objects:
  4245 ;;		On entry : 0/0
  4246 ;;		On exit  : 0/0
  4247 ;;		Unchanged: 0/0
  4248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4249 ;;      Params:         0       0       0       0
  4250 ;;      Locals:         0       0       0       0
  4251 ;;      Temps:          0       0       0       0
  4252 ;;      Totals:         0       0       0       0
  4253 ;;Total ram usage:        0 bytes
  4254 ;; Hardware stack levels used:    1
  4255 ;; Hardware stack levels required when called:    1
  4256 ;; This function calls:
  4257 ;;		Nothing
  4258 ;; This function is called by:
  4259 ;;		_main
  4260 ;; This function uses a non-reentrant model
  4261 ;;
  4262                           
  4263                           
  4264                           ;psect for function _ConfigureOscillator
  4265  0066                     _ConfigureOscillator:	
  4266                           
  4267                           ;system.c: 21: OSCCON = 0x70;
  4268                           
  4269                           ;incstack = 0
  4270                           ; Regs used in _ConfigureOscillator: [wreg]
  4271  0066  3070               	movlw	112
  4272  0067  1683               	bsf	3,5	;RP0=1, select bank1
  4273  0068  1303               	bcf	3,6	;RP1=0, select bank1
  4274  0069  008F               	movwf	15	;volatile
  4275  006A  0008               	return
  4276  006B                     __end_of_ConfigureOscillator:	
  4277                           
  4278                           	psect	text27
  4279  07F5                     __ptext27:	
  4280 ;; *************** function _isr *****************
  4281 ;; Defined at:
  4282 ;;		line 23 in file "interrupts.c"
  4283 ;; Parameters:    Size  Location     Type
  4284 ;;		None
  4285 ;; Auto vars:     Size  Location     Type
  4286 ;;		None
  4287 ;; Return value:  Size  Location     Type
  4288 ;;		None               void
  4289 ;; Registers used:
  4290 ;;		None
  4291 ;; Tracked objects:
  4292 ;;		On entry : 0/0
  4293 ;;		On exit  : 0/0
  4294 ;;		Unchanged: 0/0
  4295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4296 ;;      Params:         0       0       0       0
  4297 ;;      Locals:         0       0       0       0
  4298 ;;      Temps:          4       0       0       0
  4299 ;;      Totals:         4       0       0       0
  4300 ;;Total ram usage:        4 bytes
  4301 ;; Hardware stack levels used:    1
  4302 ;; This function calls:
  4303 ;;		Nothing
  4304 ;; This function is called by:
  4305 ;;		Interrupt level 1
  4306 ;; This function uses a non-reentrant model
  4307 ;;
  4308                           
  4309                           
  4310                           ;psect for function _isr
  4311  07F5                     _isr:	
  4312  07F5  0873               	movf	??_isr+3,w
  4313  07F6  00FF               	movwf	127
  4314  07F7  0872               	movf	??_isr+2,w
  4315  07F8  008A               	movwf	10
  4316  07F9  0871               	movf	??_isr+1,w
  4317  07FA  0084               	movwf	4
  4318  07FB  0E70               	swapf	??_isr^(0+-128),w
  4319  07FC  0083               	movwf	3
  4320  07FD  0EFE               	swapf	126,f
  4321  07FE  0E7E               	swapf	126,w
  4322  07FF  0009               	retfie
  4323  0800                     __end_of_isr:	
  4324  007E                     btemp	set	126	;btemp
  4325  007E                     wtemp	set	126
  4326  007E                     wtemp0	set	126
  4327  0080                     wtemp1	set	128
  4328  0082                     wtemp2	set	130
  4329  0084                     wtemp3	set	132
  4330  0086                     wtemp4	set	134
  4331  0088                     wtemp5	set	136
  4332  007F                     wtemp6	set	127
  4333  007E                     ttemp	set	126
  4334  007E                     ttemp0	set	126
  4335  0081                     ttemp1	set	129
  4336  0084                     ttemp2	set	132
  4337  0087                     ttemp3	set	135
  4338  007F                     ttemp4	set	127
  4339  007E                     ltemp	set	126
  4340  007E                     ltemp0	set	126
  4341  0082                     ltemp1	set	130
  4342  0086                     ltemp2	set	134
  4343  0080                     ltemp3	set	128
  4344                           
  4345                           	psect	intentry
  4346  0004                     __pintentry:	
  4347                           ;incstack = 0
  4348                           ; Regs used in _isr: []
  4349                           
  4350  0004                     interrupt_function:	
  4351  007E                     saved_w	set	btemp
  4352  0004  00FE               	movwf	btemp
  4353  0005  0E03               	swapf	3,w
  4354  0006  00F0               	movwf	??_isr
  4355  0007  0804               	movf	4,w
  4356  0008  00F1               	movwf	??_isr+1
  4357  0009  080A               	movf	10,w
  4358  000A  00F2               	movwf	??_isr+2
  4359  000B  1283               	bcf	3,5	;RP0=0, select bank0
  4360  000C  1303               	bcf	3,6	;RP1=0, select bank0
  4361  000D  087F               	movf	btemp+1,w
  4362  000E  00F3               	movwf	??_isr+3
  4363  000F  118A  2FF5         	ljmp	_isr


Data Sizes:
    Strings     333
    Constant    10
    Data        2
    BSS         53
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      10
    BANK0            80     51      57
    BANK1            80      0      46
    BANK2            80      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_12(CODE[40]), STR_11(CODE[60]), STR_10(CODE[58]), STR_9(CODE[42]), 
		 -> STR_8(CODE[37]), STR_7(CODE[18]), STR_6(CODE[8]), STR_5(CODE[18]), 
		 -> STR_4(CODE[22]), STR_3(CODE[28]), STR_2(CODE[2]), STR_1(CODE[2]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 


Critical Paths under _main in COMMON

    _tuningCheck->_checkKey
    _tune->_checkKey
    _resetTuning->___lwdiv
    _write16_eeprom->_eeprom_write
    _printf->___lwdiv
    ___lwmod->___lwdiv
    ___lwdiv->___wmul
    _play->_checkKey
    _read16_eeprom->_eeprom_read

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_tune
    _tuningCheck->_printf
    _tune->_resetTuning
    _tune_up->_check_value_range
    _tune_down->_check_value_range
    _check_value_range->_printf
    _resetTuning->_save_tuning
    _save_tuning->_write16_eeprom
    _write16_eeprom->_printf
    _move_up->_check_key_range
    _move_down->_check_key_range
    _check_key_range->_printf
    _printf->___lwmod
    ___lwmod->___lwdiv
    ___lwdiv->___wmul
    _play->_get_voltage
    _load_tuning->_read16_eeprom

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   29901
                                             48 BANK0      3     3      0
                _ConfigureOscillator
                            _InitApp
                        _load_tuning
                               _play
                             _printf
                               _tune
                        _tuningCheck
 ---------------------------------------------------------------------------------
 (1) _tuningCheck                                          0     0      0    2544
                           _checkKey
                             _printf
 ---------------------------------------------------------------------------------
 (1) _tune                                                 3     3      0   24167
                                             45 BANK0      3     3      0
                          _SPI_Write
                           _checkKey
                          _move_down
                            _move_up
                        _resetTuning
                        _save_tuning
                          _tune_down
                            _tune_up
 ---------------------------------------------------------------------------------
 (2) _tune_up                                              6     6      0    2692
                                             38 BANK0      6     6      0
                  _check_value_range
 ---------------------------------------------------------------------------------
 (2) _tune_down                                            6     6      0    2692
                                             38 BANK0      6     6      0
                  _check_value_range
 ---------------------------------------------------------------------------------
 (3) _check_value_range                                    6     6      0    2565
                                             32 BANK0      6     6      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _resetTuning                                          3     3      0    8380
                                             42 BANK0      3     3      0
                            ___lwdiv
                             ___wmul
                             _printf
                        _save_tuning
 ---------------------------------------------------------------------------------
 (2) _save_tuning                                          4     4      0    5196
                                             38 BANK0      4     4      0
                             _printf
                     _write16_eeprom
 ---------------------------------------------------------------------------------
 (3) _write16_eeprom                                       6     4      2    2786
                                             32 BANK0      6     4      2
                       _eeprom_write
                             _printf
 ---------------------------------------------------------------------------------
 (4) _eeprom_write                                         3     2      1     172
                                              4 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     290
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _move_up                                              1     1      0    2345
                                             36 BANK0      1     1      0
                    _check_key_range
 ---------------------------------------------------------------------------------
 (2) _move_down                                            1     1      0    2345
                                             36 BANK0      1     1      0
                    _check_key_range
 ---------------------------------------------------------------------------------
 (3) _check_key_range                                      4     4      0    2345
                                             32 BANK0      4     4      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              23    17      6    2345
                                             17 BANK0     15     9      6
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     287
                                             11 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     549
                                              6 COMMON     1     1      0
                                              4 BANK0      7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _play                                                 4     4      0     659
                                             11 BANK0      4     4      0
                          _SPI_Write
                           _checkKey
                        _get_voltage
 ---------------------------------------------------------------------------------
 (2) _get_voltage                                         11     7      4     108
                                              0 BANK0     11     7      4
 ---------------------------------------------------------------------------------
 (2) _checkKey                                             3     3      0     199
                                              4 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _SPI_Write                                            6     4      2     318
                                              4 COMMON     2     0      2
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _load_tuning                                          2     2      0     186
                                             11 BANK0      2     2      0
                      _read16_eeprom
 ---------------------------------------------------------------------------------
 (2) _read16_eeprom                                       11     9      2     186
                                              0 BANK0     11     9      2
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (3) _eeprom_read                                          2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _load_tuning
     _read16_eeprom
       _eeprom_read
   _play
     _SPI_Write
     _checkKey
     _get_voltage
   _printf
     ___lwdiv
       ___wmul (ARG)
     ___lwmod
       ___lwdiv (ARG)
         ___wmul (ARG)
     _putch
   _tune
     _SPI_Write
     _checkKey
     _move_down
       _check_key_range
         _printf
           ___lwdiv
             ___wmul (ARG)
           ___lwmod
             ___lwdiv (ARG)
               ___wmul (ARG)
           _putch
     _move_up
       _check_key_range
         _printf
           ___lwdiv
             ___wmul (ARG)
           ___lwmod
             ___lwdiv (ARG)
               ___wmul (ARG)
           _putch
     _resetTuning
       ___lwdiv
         ___wmul (ARG)
       ___wmul
       _printf
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
           ___lwdiv (ARG)
             ___wmul (ARG)
         _putch
       _save_tuning
         _printf
           ___lwdiv
             ___wmul (ARG)
           ___lwmod
             ___lwdiv (ARG)
               ___wmul (ARG)
           _putch
         _write16_eeprom
           _eeprom_write
           _printf
             ___lwdiv
               ___wmul (ARG)
             ___lwmod
               ___lwdiv (ARG)
                 ___wmul (ARG)
             _putch
     _save_tuning
       _printf
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
           ___lwdiv (ARG)
             ___wmul (ARG)
         _putch
       _write16_eeprom
         _eeprom_write
         _printf
           ___lwdiv
             ___wmul (ARG)
           ___lwmod
             ___lwdiv (ARG)
               ___wmul (ARG)
           _putch
     _tune_down
       _check_value_range
         _printf
           ___lwdiv
             ___wmul (ARG)
           ___lwmod
             ___lwdiv (ARG)
               ___wmul (ARG)
           _putch
     _tune_up
       _check_value_range
         _printf
           ___lwdiv
             ___wmul (ARG)
           ___lwmod
             ___lwdiv (ARG)
               ___wmul (ARG)
           _putch
   _tuningCheck
     _checkKey
     _printf
       ___lwdiv
         ___wmul (ARG)
       ___lwmod
         ___lwdiv (ARG)
           ___wmul (ARG)
       _putch

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0       0       7        0.0%
BITBANK2            50      0       0       6        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      2E       5       57.5%
BITBANK1            50      0       0       4        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     33      39       3       71.2%
BITBANK0            50      0       0       9        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      7       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      71      10        0.0%
ABS                  0      0      71       8        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu May  7 22:58:50 2015

                           pc 0002                   __CFG_CP$OFF 0000                   _SSPSTATbits 0094  
                          l40 06CC                            l34 005F                            l43 06D4  
                          _RD 0C60                            _WR 0C61                  ?_get_voltage 0020  
                          fsr 0004           ___wmul@multiplicand 0022                           l270 07DB  
                         l166 04DF                           l257 0330                           l292 072E  
                         l382 07A7                           _GIE 005F                  __CFG_CPD$OFF 0000  
               _read16_eeprom 06DC                           u765 062C                           u785 063D  
                         u795 0646                           _isr 07F5                           fsr0 0004  
                         indf 0000                          l1262 0629                          l1264 0637  
                        l1272 0650                          l1268 0645                          l1446 038C  
                        l1456 03C5                          l1712 02AA                          l1722 02C1  
                        l1706 028E                          l1802 079D                          l1900 03E6  
                        l1734 02E8                          l1744 02F6                          l1728 02C7  
                        l1760 0613                          l1904 03F0                          l1912 0401  
                        l1930 049C                          l1738 02F0                          l1746 026F  
                        l1762 061C                          l1754 05FA                          l1914 0407  
                        l1932 04C4                          l1692 0598                          l1684 0574  
                        l1756 0603                          l1860 043E                          l1908 03FA  
                        l1916 0424                          l1686 0582                          l1782 068A  
                        l1862 047E                          l1928 04BD                          l1696 05A3  
                        l1776 0529                          l1960 0673                          l1786 06A4  
                        l1794 04FF                          l1962 0680                          l1892 03D8  
                        l1878 0706                          l1798 0510                          l1958 066A  
                        l1896 03DF                          ?_isr 0070                          STR_1 0267  
                        STR_2 0267                          STR_3 0209                          STR_4 0225  
                        STR_5 024D                          STR_6 025F                          STR_7 023B  
                        STR_8 01E4                          STR_9 0192                          _BRGH 04C2  
                        _CREN 00C4                          u1115 03A8                          u1075 034D  
                        u1315 0577                          u1085 035D                          u1405 02DE  
                        u1095 036E                          u1335 0583                          u1345 058F  
                        u1355 0599                          u1615 0711                          u1535 07A8  
                        u1545 07AF                          u1715 04A5                          u1475 0534  
                        u1495 069D                          u1585 0449                          u1757 0679  
                        u1695 0412                          u1767 03CF                          u1777 0381  
                        u1787 03BA                          _SPEN 00C7                          _WREN 0C62  
                        _TXEN 04C5                          _TXIF 0064                          _SYNC 04C4  
              ??_eeprom_write 0075                          _main 0655                          _play 0493  
                        btemp 007E                          _tune 03C7                          ltemp 007E  
                        start 0011                          ttemp 007E                          wtemp 007E  
           read16_eeprom@addr 002A                 __CFG_IESO$OFF 0000               _check_key_range 0684  
      check_value_range@value 0043                 __CFG_MCLRE$ON 0000               __end_of_InitApp 05E6  
                 _tuningCheck 002B                         ??_isr 0070                         ?_main 0070  
              ?_read16_eeprom 0020                         _EEADR 010D                         ?_play 0070  
                       STR_10 0158                         STR_11 011C                         STR_12 01BC  
               __CFG_WDTE$OFF 0000                         _CARRY 0018                         _ANSEL 011E  
                       ?_tune 0070               __end_of___lwdiv 05A8               __end_of___lwmod 0655  
                       _SPBRG 0099                  ?_load_tuning 0070                         _TRISA 0085  
                       _TRISB 0086                         _TRISC 0087                         _TXREG 0019  
         _ConfigureOscillator 0066                 __CFG_PWRTE$ON 0000                __CFG_FCMEN$OFF 0000  
             __end_of_dpowers 011C                         _putch 005E                __CFG_BOREN$OFF 0000  
                       pclath 000A               __end_of_move_up 004D                         ltemp0 007E  
                       ltemp1 0082                         ltemp2 0086                         ltemp3 0080  
       write16_eeprom@hi_byte 0044                         ttemp0 007E                         ttemp1 0081  
                       ttemp2 0084                         ttemp3 0087                         ttemp4 007F  
                       status 0003                         wtemp0 007E                         wtemp1 0080  
                       wtemp2 0082                         wtemp3 0084                         wtemp4 0086  
                       wtemp5 0088                         wtemp6 007F               __end_of_tune_up 0777  
          __size_of_SPI_Write 002C         write16_eeprom@lo_byte 0043            read16_eeprom@toRet 0026  
        ?_ConfigureOscillator 0070               __initialization 0013                  __end_of_main 0684  
                __end_of_play 04E1                  __end_of_tune 0434                        ??_main 0050  
                      ??_play 002B                        ??_tune 004D                        _EEDATA 010C  
                      _EECON1 018C                        _EECON2 018D                        ?_putch 0070  
                      _ANSELH 011F       __end_of_check_key_range 06B0                        _OSCCON 008F  
                ?_save_tuning 0070                        _SSPBUF 0013              __end_of_checkKey 03C7  
                   ??_InitApp 0074         ??_ConfigureOscillator 0074                  ?_resetTuning 0070  
                      _nRABPU 040F          __size_of_eeprom_read 001B                        ___wmul 079B  
                   ??___lwdiv 0076                     ??___lwmod 002F               ??_read16_eeprom 0022  
        __end_of_eeprom_write 0753                        _printf 0269                        _tuning 00A0  
        __size_of_get_voltage 001C             __end_of_SPI_Write 06DC                  __pdataCOMMON 0077  
                      saved_w 007E                     ??_move_up 0044                     ??_tune_up 0046  
     __end_of__initialization 0028               eeprom_read@addr 0075                __pcstackCOMMON 0070  
     __size_of_write16_eeprom 003B                 __end_of_putch 0066           write16_eeprom@value 0040  
           eeprom_write@value 0074          __size_of_load_tuning 0028                       ??_putch 0074  
                  __pbssBANK0 0053                    __pbssBANK1 00A0              ?_check_key_range 0070  
                  __pmaintext 0655                  ?_tuningCheck 0070                       ?___wmul 0020  
                  __pintentry 0004            __size_of_move_down 0009                       ?_printf 0031  
                   ?_checkKey 0070                    __stringtab 0100                  tune_down@key 004B  
          __size_of_tune_down 0024             _check_value_range 04E1                       _InitApp 05A8  
                tune_up@value 0049          __size_of_save_tuning 0042            ?_check_value_range 0070  
              checkKey@keyVal 0076                 SPI_Write@data 0074          __size_of_resetTuning 005F  
       __size_of_eeprom_write 0026               __size_of___wmul 0023                       ___lwdiv 056A  
                     ___lwmod 0621           ??_check_value_range 0040                       __ptext1 002B  
                     __ptext2 03C7                       __ptext3 0753                       __ptext4 0777  
                     __ptext5 04E1                       __ptext6 0434                       __ptext7 0528  
                     __ptext8 05E6                       __ptext9 072D               __size_of_printf 00C8  
                     _dpowers 0112                    ??_checkKey 0074                  __size_of_isr 000B  
                     _move_up 0044                       clrloop0 0057                       _tune_up 0753  
        end_of_initialization 0028     __end_of_check_value_range 0528             __end_of_move_down 0056  
                _eeprom_write 072D                _write16_eeprom 05E6                       printf@c 003F  
                     printf@f 0031                  __pstringtext 0100                _in_tuning_mode 0058  
                   _PORTAbits 0005                     _PORTBbits 0006                     _PORTCbits 0007  
           __end_of_tune_down 079B          read16_eeprom@hi_byte 0029                     _TRISAbits 0085  
                   _TRISBbits 0086                     _TRISCbits 0087          read16_eeprom@lo_byte 0028  
                   _SPI_Write 06B0   __end_of_ConfigureOscillator 006B                tune_down@value 0049  
               ??_eeprom_read 0074        __end_of_write16_eeprom 0621                play@real_value 002D  
               ??_get_voltage 0024                __end_of___wmul 07BE                 __pidataCOMMON 006B  
        __size_of_tuningCheck 0019                   _BAUDCTLbits 009B         __end_of_read16_eeprom 0705  
              __end_of_printf 0331           start_initialization 0013                   __end_of_isr 0800  
                  ?_SPI_Write 0074    __size_of_check_value_range 0047              _currently_tuning 0057  
             SPI_Write@config 0022               ?_write16_eeprom 0040                      ??___wmul 0074  
         __end_of_eeprom_read 07F5                      ??_printf 0037                 ??_load_tuning 002B  
                 __pbssCOMMON 0079           __end_of_get_voltage 07DA                     ___latbits 0001  
               __pcstackBANK0 0020             __size_of_checkKey 0096            write16_eeprom@addr 0045  
            eeprom_write@addr 0076                      ?_InitApp 0070              ___lwdiv@dividend 0026  
    __size_of_check_key_range 002C                      ?___lwdiv 0024                      ?___lwmod 002B  
                    ?_move_up 0070                   ??_SPI_Write 0020                     _key_count 0077  
            ___lwdiv@quotient 0029                      ?_tune_up 0070           __end_of_load_tuning 072D  
              __size_of_putch 0008                 ??_save_tuning 0046             interrupt_function 0004  
              ___wmul@product 0074                     clear_ram0 0056                   _eeprom_read 07DA  
               ??_resetTuning 004A                     _move_down 004D                   _get_voltage 07BE  
                 __stringbase 0112             ___wmul@multiplier 0020                    printf@flag 003B  
                    _WPUAbits 0095                    printf@prec 003C                     _tune_down 0777  
        check_value_range@key 0045              __size_of_InitApp 003E                    ?_move_down 0070  
         __end_of_save_tuning 056A           __end_of_resetTuning 0493              __size_of___lwdiv 003E  
            __size_of___lwmod 0034            __end_of__stringtab 0112             ??_check_key_range 0040  
                    _checkKey 0331                   _load_tuning 0705                   _current_key 0079  
                  ?_tune_down 0070               ___lwdiv@divisor 0024               ___lwdiv@counter 0028  
                    __ptext10 079B                      __ptext11 0044                      __ptext20 0331  
                    __ptext12 004D                      __ptext21 06B0                      __ptext13 0684  
                    __ptext22 0705                      __ptext14 0269                      __ptext23 06DC  
                    __ptext15 005E                      __ptext24 07DA                      __ptext16 0621  
                    __ptext25 05A8                      __ptext17 056A                      __ptext26 0066  
                    __ptext18 0493                      __ptext27 07F5                      __ptext19 07BE  
            __size_of_move_up 0009            get_voltage@keyCode 0020              __size_of_tune_up 0024  
            ??_write16_eeprom 0042                    tune_up@key 004B                      _last_key 0053  
               __size_of_main 002F                 __size_of_play 004E                 __size_of_tune 006D  
__size_of_ConfigureOscillator 0005                 ??_tuningCheck 0077                     printf@val 003D  
                   putch@data 0074                      intlevel1 0000              save_tuning@value 0048  
                 _save_tuning 0528              ___lwmod@dividend 002D        __size_of_read16_eeprom 0029  
                 _resetTuning 0434                     stringcode 010A                   ??_move_down 0044  
                    printf@ap 003A                  _pressed_keys 0055           __end_of_tuningCheck 0044  
             ___lwmod@divisor 002B               ___lwmod@counter 0030                   ??_tune_down 0046  
                    stringtab 0100                 ?_eeprom_write 0074             __CFG_FOSC$INTRCIO 0000  
                ?_eeprom_read 0070                    _SSPCONbits 0014  
